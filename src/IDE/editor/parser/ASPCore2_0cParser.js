// Generated from .\ASPCore2_0c.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ASPCore2_0cListener = require('./ASPCore2_0cListener').ASPCore2_0cListener;
var grammarFileName = "ASPCore2_0c.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
	"\u0003I\u02b2\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
	"\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
	"\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
	"\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
	"\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
	"\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
	"\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
	"\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
	"\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
	"%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
	",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
	"3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
	":\t:\u0004;\t;\u0004<\t<\u0003\u0002\u0003\u0002\u0005\u0002{\n\u0002",
	"\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
	"\u0082\n\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u0086\n\u0004\u0003",
	"\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u008d",
	"\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
	"\u0093\n\u0006\u0005\u0006\u0095\n\u0006\u0003\u0006\u0003\u0006\u0003",
	"\u0006\u0003\u0006\u0005\u0006\u009b\n\u0006\u0003\u0006\u0003\u0006",
	"\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
	"\u00a4\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
	"\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
	"\u0006\u00b0\n\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u00b4\n\u0007",
	"\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u00bc\n\t\u0003",
	"\t\u0003\t\u0003\t\u0003\t\u0005\t\u00c2\n\t\u0005\t\u00c4\n\t\u0003",
	"\t\u0003\t\u0003\t\u0003\t\u0005\t\u00ca\n\t\u0003\t\u0003\t\u0003\t",
	"\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00d3\n\t\u0003\t\u0003\t\u0003",
	"\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00de\n\t",
	"\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00e6\n\n\u0003",
	"\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003",
	"\f\u0003\r\u0003\r\u0003\r\u0005\r\u00f3\n\r\u0006\r\u00f5\n\r\r\r\u000e",
	"\r\u00f6\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
	"\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f",
	"\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
	"\u0005\u0010\u010b\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
	"\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0114\n\u0011",
	"\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
	"\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
	"\u0121\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
	"\u0011\u0127\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
	"\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0130\n\u0012\u0003",
	"\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
	"\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u013d",
	"\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0141\n\u0013\u0003\u0013",
	"\u0003\u0013\u0005\u0013\u0145\n\u0013\u0003\u0013\u0003\u0013\u0003",
	"\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
	"\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
	"\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
	"\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003",
	"\u0018\u0005\u0018\u0162\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
	"\u0003\u0019\u0003\u0019\u0005\u0019\u0169\n\u0019\u0003\u001a\u0003",
	"\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u016f\n\u001a\u0003\u001b",
	"\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
	"\u0003\u001b\u0006\u001b\u0179\n\u001b\r\u001b\u000e\u001b\u017a\u0003",
	"\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
	"\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
	"\u001c\u0003\u001c\u0003\u001c\u0006\u001c\u018c\n\u001c\r\u001c\u000e",
	"\u001c\u018d\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d",
	"\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
	"\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0006\u001d\u019f\n",
	"\u001d\r\u001d\u000e\u001d\u01a0\u0003\u001d\u0003\u001d\u0003\u001d",
	"\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
	"\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
	"\u0006\u001e\u01b2\n\u001e\r\u001e\u000e\u001e\u01b3\u0003\u001e\u0003",
	"\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005",
	"\u001f\u01bd\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u01c4",
	"\n \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"",
	"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
	"#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003",
	"$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
	"%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003",
	"&\u0005&\u01f6\n&\u0003\'\u0003\'\u0005\'\u01fa\n\'\u0003\'\u0005\'",
	"\u01fd\n\'\u0003\'\u0003\'\u0005\'\u0201\n\'\u0003(\u0003(\u0003(\u0005",
	"(\u0206\n(\u0003)\u0003)\u0003)\u0005)\u020b\n)\u0003)\u0003)\u0005",
	")\u020f\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0215\n)\u0003*\u0003",
	"*\u0003*\u0005*\u021a\n*\u0003+\u0003+\u0003+\u0005+\u021f\n+\u0005",
	"+\u0221\n+\u0003,\u0003,\u0003,\u0005,\u0226\n,\u0003,\u0003,\u0003",
	",\u0005,\u022b\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u0231\n,\u0003",
	"-\u0003-\u0003-\u0005-\u0236\n-\u0003.\u0003.\u0003.\u0005.\u023b\n",
	".\u0005.\u023d\n.\u0003.\u0003.\u0005.\u0241\n.\u0003.\u0005.\u0244",
	"\n.\u0003/\u0003/\u00030\u00030\u00030\u00050\u024b\n0\u00030\u0003",
	"0\u00031\u00031\u00031\u00051\u0252\n1\u00032\u00032\u00032\u00052\u0257",
	"\n2\u00052\u0259\n2\u00033\u00033\u00034\u00034\u00034\u00054\u0260",
	"\n4\u00034\u00034\u00054\u0264\n4\u00035\u00035\u00035\u00055\u0269",
	"\n5\u00036\u00056\u026c\n6\u00036\u00036\u00056\u0270\n6\u00037\u0005",
	"7\u0273\n7\u00037\u00037\u00037\u00057\u0278\n7\u00037\u00057\u027b",
	"\n7\u00038\u00038\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003:\u0005",
	":\u0286\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005",
	":\u0290\n:\u0003;\u0003;\u0003;\u0003;\u0005;\u0296\n;\u0003;\u0005",
	";\u0299\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
	";\u0003;\u0005;\u02a5\n;\u0003;\u0003;\u0003;\u0003;\u0007;\u02ab\n",
	";\f;\u000e;\u02ae\u000b;\u0003<\u0003<\u0003<\u0002\u0003t=\u0002\u0004",
	"\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
	"\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv\u0002\u0006\u0003\u0002",
	"@C\u0003\u0002DE\u0003\u0002:?\u0003\u0002/2\u0002\u02d4\u0002z\u0003",
	"\u0002\u0002\u0002\u0004\u0081\u0003\u0002\u0002\u0002\u0006\u0083\u0003",
	"\u0002\u0002\u0002\b\u0087\u0003\u0002\u0002\u0002\n\u00af\u0003\u0002",
	"\u0002\u0002\f\u00b1\u0003\u0002\u0002\u0002\u000e\u00b5\u0003\u0002",
	"\u0002\u0002\u0010\u00dd\u0003\u0002\u0002\u0002\u0012\u00e5\u0003\u0002",
	"\u0002\u0002\u0014\u00e7\u0003\u0002\u0002\u0002\u0016\u00eb\u0003\u0002",
	"\u0002\u0002\u0018\u00ef\u0003\u0002\u0002\u0002\u001a\u00fa\u0003\u0002",
	"\u0002\u0002\u001c\u0102\u0003\u0002\u0002\u0002\u001e\u0107\u0003\u0002",
	"\u0002\u0002 \u0126\u0003\u0002\u0002\u0002\"\u0128\u0003\u0002\u0002",
	"\u0002$\u0133\u0003\u0002\u0002\u0002&\u014a\u0003\u0002\u0002\u0002",
	"(\u014e\u0003\u0002\u0002\u0002*\u0154\u0003\u0002\u0002\u0002,\u0158",
	"\u0003\u0002\u0002\u0002.\u015e\u0003\u0002\u0002\u00020\u0163\u0003",
	"\u0002\u0002\u00022\u016e\u0003\u0002\u0002\u00024\u0170\u0003\u0002",
	"\u0002\u00026\u017f\u0003\u0002\u0002\u00028\u0192\u0003\u0002\u0002",
	"\u0002:\u01a5\u0003\u0002\u0002\u0002<\u01bc\u0003\u0002\u0002\u0002",
	">\u01be\u0003\u0002\u0002\u0002@\u01c8\u0003\u0002\u0002\u0002B\u01cd",
	"\u0003\u0002\u0002\u0002D\u01d6\u0003\u0002\u0002\u0002F\u01df\u0003",
	"\u0002\u0002\u0002H\u01e8\u0003\u0002\u0002\u0002J\u01f5\u0003\u0002",
	"\u0002\u0002L\u01fc\u0003\u0002\u0002\u0002N\u0202\u0003\u0002\u0002",
	"\u0002P\u020a\u0003\u0002\u0002\u0002R\u0216\u0003\u0002\u0002\u0002",
	"T\u021b\u0003\u0002\u0002\u0002V\u0225\u0003\u0002\u0002\u0002X\u0232",
	"\u0003\u0002\u0002\u0002Z\u0243\u0003\u0002\u0002\u0002\\\u0245\u0003",
	"\u0002\u0002\u0002^\u0247\u0003\u0002\u0002\u0002`\u024e\u0003\u0002",
	"\u0002\u0002b\u0253\u0003\u0002\u0002\u0002d\u025a\u0003\u0002\u0002",
	"\u0002f\u025c\u0003\u0002\u0002\u0002h\u0265\u0003\u0002\u0002\u0002",
	"j\u026f\u0003\u0002\u0002\u0002l\u0272\u0003\u0002\u0002\u0002n\u027c",
	"\u0003\u0002\u0002\u0002p\u0280\u0003\u0002\u0002\u0002r\u028f\u0003",
	"\u0002\u0002\u0002t\u02a4\u0003\u0002\u0002\u0002v\u02af\u0003\u0002",
	"\u0002\u0002x{\u0005\u0004\u0003\u0002y{\u0003\u0002\u0002\u0002zx\u0003",
	"\u0002\u0002\u0002zy\u0003\u0002\u0002\u0002{\u0003\u0003\u0002\u0002",
	"\u0002|\u0082\u0005\u0006\u0004\u0002}\u0082\u0005\b\u0005\u0002~\u007f",
	"\u0005\u0006\u0004\u0002\u007f\u0080\u0005\b\u0005\u0002\u0080\u0082",
	"\u0003\u0002\u0002\u0002\u0081|\u0003\u0002\u0002\u0002\u0081}\u0003",
	"\u0002\u0002\u0002\u0081~\u0003\u0002\u0002\u0002\u0082\u0005\u0003",
	"\u0002\u0002\u0002\u0083\u0085\u0005\n\u0006\u0002\u0084\u0086\u0005",
	"\u0006\u0004\u0002\u0085\u0084\u0003\u0002\u0002\u0002\u0085\u0086\u0003",
	"\u0002\u0002\u0002\u0086\u0007\u0003\u0002\u0002\u0002\u0087\u0088\u0005",
	"l7\u0002\u0088\u0089\u0007)\u0002\u0002\u0089\t\u0003\u0002\u0002\u0002",
	"\u008a\u008c\u0007-\u0002\u0002\u008b\u008d\u0005L\'\u0002\u008c\u008b",
	"\u0003\u0002\u0002\u0002\u008c\u008d\u0003\u0002\u0002\u0002\u008d\u008e",
	"\u0003\u0002\u0002\u0002\u008e\u00b0\u0007\'\u0002\u0002\u008f\u0094",
	"\u0005J&\u0002\u0090\u0092\u0007-\u0002\u0002\u0091\u0093\u0005L\'\u0002",
	"\u0092\u0091\u0003\u0002\u0002\u0002\u0092\u0093\u0003\u0002\u0002\u0002",
	"\u0093\u0095\u0003\u0002\u0002\u0002\u0094\u0090\u0003\u0002\u0002\u0002",
	"\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002",
	"\u0096\u0097\u0007\'\u0002\u0002\u0097\u00b0\u0003\u0002\u0002\u0002",
	"\u0098\u009a\u0007.\u0002\u0002\u0099\u009b\u0005L\'\u0002\u009a\u0099",
	"\u0003\u0002\u0002\u0002\u009a\u009b\u0003\u0002\u0002\u0002\u009b\u009c",
	"\u0003\u0002\u0002\u0002\u009c\u009d\u0007\'\u0002\u0002\u009d\u009e",
	"\u00076\u0002\u0002\u009e\u009f\u0005f4\u0002\u009f\u00a0\u00077\u0002",
	"\u0002\u00a0\u00b0\u0003\u0002\u0002\u0002\u00a1\u00a3\u0007.\u0002",
	"\u0002\u00a2\u00a4\u0005L\'\u0002\u00a3\u00a2\u0003\u0002\u0002\u0002",
	"\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4\u00a5\u0003\u0002\u0002\u0002",
	"\u00a5\u00a6\u00076\u0002\u0002\u00a6\u00a7\u0005f4\u0002\u00a7\u00a8",
	"\u00077\u0002\u0002\u00a8\u00a9\u0007\'\u0002\u0002\u00a9\u00aa\b\u0006",
	"\u0001\u0002\u00aa\u00b0\u0003\u0002\u0002\u0002\u00ab\u00ac\u0005^",
	"0\u0002\u00ac\u00ad\u0007\'\u0002\u0002\u00ad\u00b0\u0003\u0002\u0002",
	"\u0002\u00ae\u00b0\u0005\u0012\n\u0002\u00af\u008a\u0003\u0002\u0002",
	"\u0002\u00af\u008f\u0003\u0002\u0002\u0002\u00af\u0098\u0003\u0002\u0002",
	"\u0002\u00af\u00a1\u0003\u0002\u0002\u0002\u00af\u00ab\u0003\u0002\u0002",
	"\u0002\u00af\u00ae\u0003\u0002\u0002\u0002\u00b0\u000b\u0003\u0002\u0002",
	"\u0002\u00b1\u00b3\u0005\u0010\t\u0002\u00b2\u00b4\u0005\f\u0007\u0002",
	"\u00b3\u00b2\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002",
	"\u00b4\r\u0003\u0002\u0002\u0002\u00b5\u00b6\u0005\u001a\u000e\u0002",
	"\u00b6\u00b7\u0005\f\u0007\u0002\u00b7\u00b8\u0005\u001c\u000f\u0002",
	"\u00b8\u000f\u0003\u0002\u0002\u0002\u00b9\u00bb\u0007-\u0002\u0002",
	"\u00ba\u00bc\u0005L\'\u0002\u00bb\u00ba\u0003\u0002\u0002\u0002\u00bb",
	"\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd",
	"\u00de\u0007\'\u0002\u0002\u00be\u00c3\u0005J&\u0002\u00bf\u00c1\u0007",
	"-\u0002\u0002\u00c0\u00c2\u0005L\'\u0002\u00c1\u00c0\u0003\u0002\u0002",
	"\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2\u00c4\u0003\u0002\u0002",
	"\u0002\u00c3\u00bf\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002",
	"\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007\'\u0002",
	"\u0002\u00c6\u00de\u0003\u0002\u0002\u0002\u00c7\u00c9\u0007.\u0002",
	"\u0002\u00c8\u00ca\u0005L\'\u0002\u00c9\u00c8\u0003\u0002\u0002\u0002",
	"\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002",
	"\u00cb\u00cc\u0007\'\u0002\u0002\u00cc\u00cd\u00076\u0002\u0002\u00cd",
	"\u00ce\u0005f4\u0002\u00ce\u00cf\u00077\u0002\u0002\u00cf\u00de\u0003",
	"\u0002\u0002\u0002\u00d0\u00d2\u0007.\u0002\u0002\u00d1\u00d3\u0005",
	"L\'\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002",
	"\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u00076",
	"\u0002\u0002\u00d5\u00d6\u0005f4\u0002\u00d6\u00d7\u00077\u0002\u0002",
	"\u00d7\u00d8\u0007\'\u0002\u0002\u00d8\u00d9\b\t\u0001\u0002\u00d9\u00de",
	"\u0003\u0002\u0002\u0002\u00da\u00db\u0005^0\u0002\u00db\u00dc\u0007",
	"\'\u0002\u0002\u00dc\u00de\u0003\u0002\u0002\u0002\u00dd\u00b9\u0003",
	"\u0002\u0002\u0002\u00dd\u00be\u0003\u0002\u0002\u0002\u00dd\u00c7\u0003",
	"\u0002\u0002\u0002\u00dd\u00d0\u0003\u0002\u0002\u0002\u00dd\u00da\u0003",
	"\u0002\u0002\u0002\u00de\u0011\u0003\u0002\u0002\u0002\u00df\u00e0\u0007",
	" \u0002\u0002\u00e0\u00e1\u0005\u001e\u0010\u0002\u00e1\u00e2\u0007",
	"!\u0002\u0002\u00e2\u00e6\u0003\u0002\u0002\u0002\u00e3\u00e6\u0005",
	"\u000e\b\u0002\u00e4\u00e6\u0005 \u0011\u0002\u00e5\u00df\u0003\u0002",
	"\u0002\u0002\u00e5\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e4\u0003\u0002",
	"\u0002\u0002\u00e6\u0013\u0003\u0002\u0002\u0002\u00e7\u00e8\u0007\u0003",
	"\u0002\u0002\u00e8\u00e9\u0007:\u0002\u0002\u00e9\u00ea\u0007$\u0002",
	"\u0002\u00ea\u0015\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u0004\u0002",
	"\u0002\u00ec\u00ed\u0007:\u0002\u0002\u00ed\u00ee\u0007$\u0002\u0002",
	"\u00ee\u0017\u0003\u0002\u0002\u0002\u00ef\u00f4\u00078\u0002\u0002",
	"\u00f0\u00f2\u0007$\u0002\u0002\u00f1\u00f3\u0007(\u0002\u0002\u00f2",
	"\u00f1\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3",
	"\u00f5\u0003\u0002\u0002\u0002\u00f4\u00f0\u0003\u0002\u0002\u0002\u00f5",
	"\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f4\u0003\u0002\u0002\u0002\u00f6",
	"\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8",
	"\u00f9\u00079\u0002\u0002\u00f9\u0019\u0003\u0002\u0002\u0002\u00fa",
	"\u00fb\u0007 \u0002\u0002\u00fb\u00fc\u00073\u0002\u0002\u00fc\u00fd",
	"\u0007\u0005\u0002\u0002\u00fd\u00fe\u00074\u0002\u0002\u00fe\u00ff",
	"\u0005\u0014\u000b\u0002\u00ff\u0100\u00075\u0002\u0002\u0100\u0101",
	"\u0007!\u0002\u0002\u0101\u001b\u0003\u0002\u0002\u0002\u0102\u0103",
	"\u0007 \u0002\u0002\u0103\u0104\u00073\u0002\u0002\u0104\u0105\u0007",
	"\u0006\u0002\u0002\u0105\u0106\u0007!\u0002\u0002\u0106\u001d\u0003",
	"\u0002\u0002\u0002\u0107\u010a\u00073\u0002\u0002\u0108\u010b\u0005",
	"\"\u0012\u0002\u0109\u010b\u0005$\u0013\u0002\u010a\u0108\u0003\u0002",
	"\u0002\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010b\u001f\u0003\u0002",
	"\u0002\u0002\u010c\u010d\u0007 \u0002\u0002\u010d\u010e\u00073\u0002",
	"\u0002\u010e\u010f\u0007\u0007\u0002\u0002\u010f\u0110\u00074\u0002",
	"\u0002\u0110\u0113\u0005\u0014\u000b\u0002\u0111\u0112\u0007(\u0002",
	"\u0002\u0112\u0114\u0005\u0016\f\u0002\u0113\u0111\u0003\u0002\u0002",
	"\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0115\u0003\u0002\u0002",
	"\u0002\u0115\u0116\u00075\u0002\u0002\u0116\u0117\u0007!\u0002\u0002",
	"\u0117\u0118\u0005\u0010\t\u0002\u0118\u0127\u0003\u0002\u0002\u0002",
	"\u0119\u011a\u0007 \u0002\u0002\u011a\u011b\u00073\u0002\u0002\u011b",
	"\u011c\u0007\u0007\u0002\u0002\u011c\u011d\u00074\u0002\u0002\u011d",
	"\u0120\u0005\u0014\u000b\u0002\u011e\u011f\u0007(\u0002\u0002\u011f",
	"\u0121\u0005\u0016\f\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120",
	"\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122",
	"\u0123\u00075\u0002\u0002\u0123\u0124\u0007!\u0002\u0002\u0124\u0125",
	"\b\u0011\u0001\u0002\u0125\u0127\u0003\u0002\u0002\u0002\u0126\u010c",
	"\u0003\u0002\u0002\u0002\u0126\u0119\u0003\u0002\u0002\u0002\u0127!",
	"\u0003\u0002\u0002\u0002\u0128\u0129\u0007\u0004\u0002\u0002\u0129\u012a",
	"\u00074\u0002\u0002\u012a\u012f\u0005\u0014\u000b\u0002\u012b\u012c",
	"\u0007(\u0002\u0002\u012c\u012d\u0007\b\u0002\u0002\u012d\u012e\u0007",
	":\u0002\u0002\u012e\u0130\u0005\u0018\r\u0002\u012f\u012b\u0003\u0002",
	"\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002",
	"\u0002\u0002\u0131\u0132\u00075\u0002\u0002\u0132#\u0003\u0002\u0002",
	"\u0002\u0133\u0134\u0007\t\u0002\u0002\u0134\u0135\u00074\u0002\u0002",
	"\u0135\u0136\u0005\u0014\u000b\u0002\u0136\u0137\u0007(\u0002\u0002",
	"\u0137\u0138\u0007\n\u0002\u0002\u0138\u0139\u0007:\u0002\u0002\u0139",
	"\u013c\u0005\u0018\r\u0002\u013a\u013b\u0007(\u0002\u0002\u013b\u013d",
	"\u0005&\u0014\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013d",
	"\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002\u013e\u013f",
	"\u0007(\u0002\u0002\u013f\u0141\u0005(\u0015\u0002\u0140\u013e\u0003",
	"\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0144\u0003",
	"\u0002\u0002\u0002\u0142\u0143\u0007(\u0002\u0002\u0143\u0145\u0005",
	"*\u0016\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0144\u0145\u0003",
	"\u0002\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u0147\u0007",
	"(\u0002\u0002\u0147\u0148\u0005,\u0017\u0002\u0148\u0149\u00075\u0002",
	"\u0002\u0149%\u0003\u0002\u0002\u0002\u014a\u014b\u0007\u000b\u0002",
	"\u0002\u014b\u014c\u0007:\u0002\u0002\u014c\u014d\u0005\u0018\r\u0002",
	"\u014d\'\u0003\u0002\u0002\u0002\u014e\u014f\u0007\f\u0002\u0002\u014f",
	"\u0150\u0007:\u0002\u0002\u0150\u0151\u0007\u001e\u0002\u0002\u0151",
	"\u0152\u0005\f\u0007\u0002\u0152\u0153\u0007\u001e\u0002\u0002\u0153",
	")\u0003\u0002\u0002\u0002\u0154\u0155\u0007\r\u0002\u0002\u0155\u0156",
	"\u0007:\u0002\u0002\u0156\u0157\u0005\u0018\r\u0002\u0157+\u0003\u0002",
	"\u0002\u0002\u0158\u0159\u0007\u000e\u0002\u0002\u0159\u015a\u0007:",
	"\u0002\u0002\u015a\u015b\u00078\u0002\u0002\u015b\u015c\u0005.\u0018",
	"\u0002\u015c\u015d\u00079\u0002\u0002\u015d-\u0003\u0002\u0002\u0002",
	"\u015e\u0161\u00050\u0019\u0002\u015f\u0160\u0007(\u0002\u0002\u0160",
	"\u0162\u0005.\u0018\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0161",
	"\u0162\u0003\u0002\u0002\u0002\u0162/\u0003\u0002\u0002\u0002\u0163",
	"\u0168\u00073\u0002\u0002\u0164\u0169\u0007\u000f\u0002\u0002\u0165",
	"\u0169\u00052\u001a\u0002\u0166\u0169\u0005<\u001f\u0002\u0167\u0169",
	"\u0005H%\u0002\u0168\u0164\u0003\u0002\u0002\u0002\u0168\u0165\u0003",
	"\u0002\u0002\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0168\u0167\u0003",
	"\u0002\u0002\u0002\u01691\u0003\u0002\u0002\u0002\u016a\u016f\u0005",
	"4\u001b\u0002\u016b\u016f\u00056\u001c\u0002\u016c\u016f\u00058\u001d",
	"\u0002\u016d\u016f\u0005:\u001e\u0002\u016e\u016a\u0003\u0002\u0002",
	"\u0002\u016e\u016b\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002\u0002",
	"\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016f3\u0003\u0002\u0002",
	"\u0002\u0170\u0171\u0007\u0010\u0002\u0002\u0171\u0172\u00074\u0002",
	"\u0002\u0172\u0173\u0007\u0011\u0002\u0002\u0173\u0174\u0007:\u0002",
	"\u0002\u0174\u0178\u0007\u001e\u0002\u0002\u0175\u0176\u0005l7\u0002",
	"\u0176\u0177\u0007\'\u0002\u0002\u0177\u0179\u0003\u0002\u0002\u0002",
	"\u0178\u0175\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002",
	"\u017a\u0178\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002",
	"\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\u0007\u001e\u0002\u0002",
	"\u017d\u017e\u00075\u0002\u0002\u017e5\u0003\u0002\u0002\u0002\u017f",
	"\u0180\u0007\u0012\u0002\u0002\u0180\u0181\u00074\u0002\u0002\u0181",
	"\u0182\u0007\u0013\u0002\u0002\u0182\u0183\u0007:\u0002\u0002\u0183",
	"\u0184\u0007%\u0002\u0002\u0184\u0185\u0007(\u0002\u0002\u0185\u0186",
	"\u0007\u0011\u0002\u0002\u0186\u0187\u0007:\u0002\u0002\u0187\u018b",
	"\u0007\u001e\u0002\u0002\u0188\u0189\u0005l7\u0002\u0189\u018a\u0007",
	"\'\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u0188\u0003",
	"\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018b\u0003",
	"\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f\u0003",
	"\u0002\u0002\u0002\u018f\u0190\u0007\u001e\u0002\u0002\u0190\u0191\u0007",
	"5\u0002\u0002\u01917\u0003\u0002\u0002\u0002\u0192\u0193\u0007\u0014",
	"\u0002\u0002\u0193\u0194\u00074\u0002\u0002\u0194\u0195\u0007\u0013",
	"\u0002\u0002\u0195\u0196\u0007:\u0002\u0002\u0196\u0197\u0007%\u0002",
	"\u0002\u0197\u0198\u0007(\u0002\u0002\u0198\u0199\u0007\u0011\u0002",
	"\u0002\u0199\u019a\u0007:\u0002\u0002\u019a\u019e\u0007\u001e\u0002",
	"\u0002\u019b\u019c\u0005l7\u0002\u019c\u019d\u0007\'\u0002\u0002\u019d",
	"\u019f\u0003\u0002\u0002\u0002\u019e\u019b\u0003\u0002\u0002\u0002\u019f",
	"\u01a0\u0003\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0",
	"\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2",
	"\u01a3\u0007\u001e\u0002\u0002\u01a3\u01a4\u00075\u0002\u0002\u01a4",
	"9\u0003\u0002\u0002\u0002\u01a5\u01a6\u0007\u0015\u0002\u0002\u01a6",
	"\u01a7\u00074\u0002\u0002\u01a7\u01a8\u0007\u0013\u0002\u0002\u01a8",
	"\u01a9\u0007:\u0002\u0002\u01a9\u01aa\u0007%\u0002\u0002\u01aa\u01ab",
	"\u0007(\u0002\u0002\u01ab\u01ac\u0007\u0011\u0002\u0002\u01ac\u01ad",
	"\u0007:\u0002\u0002\u01ad\u01b1\u0007\u001e\u0002\u0002\u01ae\u01af",
	"\u0005l7\u0002\u01af\u01b0\u0007\'\u0002\u0002\u01b0\u01b2\u0003\u0002",
	"\u0002\u0002\u01b1\u01ae\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002",
	"\u0002\u0002\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002",
	"\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01b6\u0007\u001e",
	"\u0002\u0002\u01b6\u01b7\u00075\u0002\u0002\u01b7;\u0003\u0002\u0002",
	"\u0002\u01b8\u01bd\u0005@!\u0002\u01b9\u01bd\u0005B\"\u0002\u01ba\u01bd",
	"\u0005D#\u0002\u01bb\u01bd\u0005F$\u0002\u01bc\u01b8\u0003\u0002\u0002",
	"\u0002\u01bc\u01b9\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002",
	"\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002\u01bd=\u0003\u0002\u0002",
	"\u0002\u01be\u01bf\u0007\u0016\u0002\u0002\u01bf\u01c0\u0007:\u0002",
	"\u0002\u01c0\u01c1\u0007\u001e\u0002\u0002\u01c1\u01c3\u0007-\u0002",
	"\u0002\u01c2\u01c4\u0005L\'\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002",
	"\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002",
	"\u01c5\u01c6\u0007\'\u0002\u0002\u01c6\u01c7\u0007\u001e\u0002\u0002",
	"\u01c7?\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007\u0017\u0002\u0002",
	"\u01c9\u01ca\u00074\u0002\u0002\u01ca\u01cb\u0005> \u0002\u01cb\u01cc",
	"\u00075\u0002\u0002\u01ccA\u0003\u0002\u0002\u0002\u01cd\u01ce\u0007",
	"\u0018\u0002\u0002\u01ce\u01cf\u00074\u0002\u0002\u01cf\u01d0\u0007",
	"\u0013\u0002\u0002\u01d0\u01d1\u0007:\u0002\u0002\u01d1\u01d2\u0007",
	"%\u0002\u0002\u01d2\u01d3\u0007(\u0002\u0002\u01d3\u01d4\u0005> \u0002",
	"\u01d4\u01d5\u00075\u0002\u0002\u01d5C\u0003\u0002\u0002\u0002\u01d6",
	"\u01d7\u0007\u0019\u0002\u0002\u01d7\u01d8\u00074\u0002\u0002\u01d8",
	"\u01d9\u0007\u0013\u0002\u0002\u01d9\u01da\u0007:\u0002\u0002\u01da",
	"\u01db\u0007%\u0002\u0002\u01db\u01dc\u0007(\u0002\u0002\u01dc\u01dd",
	"\u0005> \u0002\u01dd\u01de\u00075\u0002\u0002\u01deE\u0003\u0002\u0002",
	"\u0002\u01df\u01e0\u0007\u001a\u0002\u0002\u01e0\u01e1\u00074\u0002",
	"\u0002\u01e1\u01e2\u0007\u0013\u0002\u0002\u01e2\u01e3\u0007:\u0002",
	"\u0002\u01e3\u01e4\u0007%\u0002\u0002\u01e4\u01e5\u0007(\u0002\u0002",
	"\u01e5\u01e6\u0005> \u0002\u01e6\u01e7\u00075\u0002\u0002\u01e7G\u0003",
	"\u0002\u0002\u0002\u01e8\u01e9\u0007\u001b\u0002\u0002\u01e9\u01ea\u0007",
	"4\u0002\u0002\u01ea\u01eb\u0007\u001c\u0002\u0002\u01eb\u01ec\u0007",
	":\u0002\u0002\u01ec\u01ed\u0007%\u0002\u0002\u01ed\u01ee\u0007(\u0002",
	"\u0002\u01ee\u01ef\u0007\u001d\u0002\u0002\u01ef\u01f0\u0007:\u0002",
	"\u0002\u01f0\u01f1\u0007%\u0002\u0002\u01f1\u01f2\u00075\u0002\u0002",
	"\u01f2I\u0003\u0002\u0002\u0002\u01f3\u01f6\u0005N(\u0002\u01f4\u01f6",
	"\u0005P)\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f4\u0003",
	"\u0002\u0002\u0002\u01f6K\u0003\u0002\u0002\u0002\u01f7\u01fd\u0005",
	"j6\u0002\u01f8\u01fa\u0007\u001f\u0002\u0002\u01f9\u01f8\u0003\u0002",
	"\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002",
	"\u0002\u0002\u01fb\u01fd\u0005V,\u0002\u01fc\u01f7\u0003\u0002\u0002",
	"\u0002\u01fc\u01f9\u0003\u0002\u0002\u0002\u01fd\u0200\u0003\u0002\u0002",
	"\u0002\u01fe\u01ff\u0007(\u0002\u0002\u01ff\u0201\u0005L\'\u0002\u0200",
	"\u01fe\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201",
	"M\u0003\u0002\u0002\u0002\u0202\u0205\u0005l7\u0002\u0203\u0204\u0007",
	",\u0002\u0002\u0204\u0206\u0005N(\u0002\u0205\u0203\u0003\u0002\u0002",
	"\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206O\u0003\u0002\u0002",
	"\u0002\u0207\u0208\u0005t;\u0002\u0208\u0209\u0005p9\u0002\u0209\u020b",
	"\u0003\u0002\u0002\u0002\u020a\u0207\u0003\u0002\u0002\u0002\u020a\u020b",
	"\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020e",
	"\u00078\u0002\u0002\u020d\u020f\u0005R*\u0002\u020e\u020d\u0003\u0002",
	"\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002",
	"\u0002\u0002\u0210\u0214\u00079\u0002\u0002\u0211\u0212\u0005p9\u0002",
	"\u0212\u0213\u0005t;\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214",
	"\u0211\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215",
	"Q\u0003\u0002\u0002\u0002\u0216\u0219\u0005T+\u0002\u0217\u0218\u0007",
	"+\u0002\u0002\u0218\u021a\u0005R*\u0002\u0219\u0217\u0003\u0002\u0002",
	"\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021aS\u0003\u0002\u0002",
	"\u0002\u021b\u0220\u0005l7\u0002\u021c\u021e\u0007*\u0002\u0002\u021d",
	"\u021f\u0005h5\u0002\u021e\u021d\u0003\u0002\u0002\u0002\u021e\u021f",
	"\u0003\u0002\u0002\u0002\u021f\u0221\u0003\u0002\u0002\u0002\u0220\u021c",
	"\u0003\u0002\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221U",
	"\u0003\u0002\u0002\u0002\u0222\u0223\u0005t;\u0002\u0223\u0224\u0005",
	"p9\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u0222\u0003\u0002",
	"\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002",
	"\u0002\u0002\u0227\u0228\u0005\\/\u0002\u0228\u022a\u00078\u0002\u0002",
	"\u0229\u022b\u0005X-\u0002\u022a\u0229\u0003\u0002\u0002\u0002\u022a",
	"\u022b\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c",
	"\u0230\u00079\u0002\u0002\u022d\u022e\u0005p9\u0002\u022e\u022f\u0005",
	"t;\u0002\u022f\u0231\u0003\u0002\u0002\u0002\u0230\u022d\u0003\u0002",
	"\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231W\u0003\u0002",
	"\u0002\u0002\u0232\u0235\u0005Z.\u0002\u0233\u0234\u0007+\u0002\u0002",
	"\u0234\u0236\u0005X-\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235",
	"\u0236\u0003\u0002\u0002\u0002\u0236Y\u0003\u0002\u0002\u0002\u0237",
	"\u023c\u0005r:\u0002\u0238\u023a\u0007*\u0002\u0002\u0239\u023b\u0005",
	"h5\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002",
	"\u0002\u0002\u023b\u023d\u0003\u0002\u0002\u0002\u023c\u0238\u0003\u0002",
	"\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u0244\u0003\u0002",
	"\u0002\u0002\u023e\u0240\u0007*\u0002\u0002\u023f\u0241\u0005h5\u0002",
	"\u0240\u023f\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002",
	"\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0244\b.\u0001\u0002\u0243",
	"\u0237\u0003\u0002\u0002\u0002\u0243\u023e\u0003\u0002\u0002\u0002\u0244",
	"[\u0003\u0002\u0002\u0002\u0245\u0246\t\u0002\u0002\u0002\u0246]\u0003",
	"\u0002\u0002\u0002\u0247\u0248\u0005d3\u0002\u0248\u024a\u00078\u0002",
	"\u0002\u0249\u024b\u0005`1\u0002\u024a\u0249\u0003\u0002\u0002\u0002",
	"\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002",
	"\u024c\u024d\u00079\u0002\u0002\u024d_\u0003\u0002\u0002\u0002\u024e",
	"\u0251\u0005b2\u0002\u024f\u0250\u0007+\u0002\u0002\u0250\u0252\u0005",
	"`1\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002",
	"\u0002\u0002\u0252a\u0003\u0002\u0002\u0002\u0253\u0258\u0005f4\u0002",
	"\u0254\u0256\u0007*\u0002\u0002\u0255\u0257\u0005h5\u0002\u0256\u0255",
	"\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0259",
	"\u0003\u0002\u0002\u0002\u0258\u0254\u0003\u0002\u0002\u0002\u0258\u0259",
	"\u0003\u0002\u0002\u0002\u0259c\u0003\u0002\u0002\u0002\u025a\u025b",
	"\t\u0003\u0002\u0002\u025be\u0003\u0002\u0002\u0002\u025c\u025f\u0005",
	"t;\u0002\u025d\u025e\u00073\u0002\u0002\u025e\u0260\u0005t;\u0002\u025f",
	"\u025d\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260",
	"\u0263\u0003\u0002\u0002\u0002\u0261\u0262\u0007(\u0002\u0002\u0262",
	"\u0264\u0005r:\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0264",
	"\u0003\u0002\u0002\u0002\u0264g\u0003\u0002\u0002\u0002\u0265\u0268",
	"\u0005j6\u0002\u0266\u0267\u0007(\u0002\u0002\u0267\u0269\u0005h5\u0002",
	"\u0268\u0266\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002",
	"\u0269i\u0003\u0002\u0002\u0002\u026a\u026c\u0007\u001f\u0002\u0002",
	"\u026b\u026a\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002",
	"\u026c\u026d\u0003\u0002\u0002\u0002\u026d\u0270\u0005l7\u0002\u026e",
	"\u0270\u0005n8\u0002\u026f\u026b\u0003\u0002\u0002\u0002\u026f\u026e",
	"\u0003\u0002\u0002\u0002\u0270k\u0003\u0002\u0002\u0002\u0271\u0273",
	"\u00070\u0002\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0272\u0273",
	"\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274\u027a",
	"\u0007\"\u0002\u0002\u0275\u0277\u00074\u0002\u0002\u0276\u0278\u0005",
	"r:\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002",
	"\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027b\u00075",
	"\u0002\u0002\u027a\u0275\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
	"\u0002\u0002\u027bm\u0003\u0002\u0002\u0002\u027c\u027d\u0005t;\u0002",
	"\u027d\u027e\u0005p9\u0002\u027e\u027f\u0005t;\u0002\u027fo\u0003\u0002",
	"\u0002\u0002\u0280\u0281\t\u0004\u0002\u0002\u0281q\u0003\u0002\u0002",
	"\u0002\u0282\u0285\u0005t;\u0002\u0283\u0284\u0007(\u0002\u0002\u0284",
	"\u0286\u0005r:\u0002\u0285\u0283\u0003\u0002\u0002\u0002\u0285\u0286",
	"\u0003\u0002\u0002\u0002\u0286\u0290\u0003\u0002\u0002\u0002\u0287\u0288",
	"\u0005t;\u0002\u0288\u0289\u0007(\u0002\u0002\u0289\u028a\b:\u0001\u0002",
	"\u028a\u0290\u0003\u0002\u0002\u0002\u028b\u028c\u0007(\u0002\u0002",
	"\u028c\u028d\u0005t;\u0002\u028d\u028e\b:\u0001\u0002\u028e\u0290\u0003",
	"\u0002\u0002\u0002\u028f\u0282\u0003\u0002\u0002\u0002\u028f\u0287\u0003",
	"\u0002\u0002\u0002\u028f\u028b\u0003\u0002\u0002\u0002\u0290s\u0003",
	"\u0002\u0002\u0002\u0291\u0292\b;\u0001\u0002\u0292\u0298\u0007\"\u0002",
	"\u0002\u0293\u0295\u00074\u0002\u0002\u0294\u0296\u0005r:\u0002\u0295",
	"\u0294\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296",
	"\u0297\u0003\u0002\u0002\u0002\u0297\u0299\u00075\u0002\u0002\u0298",
	"\u0293\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299",
	"\u02a5\u0003\u0002\u0002\u0002\u029a\u02a5\u0007%\u0002\u0002\u029b",
	"\u02a5\u0007$\u0002\u0002\u029c\u02a5\u0007#\u0002\u0002\u029d\u02a5",
	"\u0007&\u0002\u0002\u029e\u029f\u00074\u0002\u0002\u029f\u02a0\u0005",
	"t;\u0002\u02a0\u02a1\u00075\u0002\u0002\u02a1\u02a5\u0003\u0002\u0002",
	"\u0002\u02a2\u02a3\u00070\u0002\u0002\u02a3\u02a5\u0005t;\u0004\u02a4",
	"\u0291\u0003\u0002\u0002\u0002\u02a4\u029a\u0003\u0002\u0002\u0002\u02a4",
	"\u029b\u0003\u0002\u0002\u0002\u02a4\u029c\u0003\u0002\u0002\u0002\u02a4",
	"\u029d\u0003\u0002\u0002\u0002\u02a4\u029e\u0003\u0002\u0002\u0002\u02a4",
	"\u02a2\u0003\u0002\u0002\u0002\u02a5\u02ac\u0003\u0002\u0002\u0002\u02a6",
	"\u02a7\f\u0003\u0002\u0002\u02a7\u02a8\u0005v<\u0002\u02a8\u02a9\u0005",
	"t;\u0004\u02a9\u02ab\u0003\u0002\u0002\u0002\u02aa\u02a6\u0003\u0002",
	"\u0002\u0002\u02ab\u02ae\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002",
	"\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02adu\u0003\u0002",
	"\u0002\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02af\u02b0\t\u0005",
	"\u0002\u0002\u02b0w\u0003\u0002\u0002\u0002Kz\u0081\u0085\u008c\u0092",
	"\u0094\u009a\u00a3\u00af\u00b3\u00bb\u00c1\u00c3\u00c9\u00d2\u00dd\u00e5",
	"\u00f2\u00f6\u010a\u0113\u0120\u0126\u012f\u013c\u0140\u0144\u0161\u0168",
	"\u016e\u017a\u018d\u01a0\u01b3\u01bc\u01c3\u01f5\u01f9\u01fc\u0200\u0205",
	"\u020a\u020e\u0214\u0219\u021e\u0220\u0225\u022a\u0230\u0235\u023a\u023c",
	"\u0240\u0243\u024a\u0251\u0256\u0258\u025f\u0263\u0268\u026b\u026f\u0272",
	"\u0277\u027a\u0285\u028f\u0295\u0298\u02a4\u02ac"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
	return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [null, "'name'", "'block'", "'start-block'", "'end-block'",
	"'rule'", "'rules'", "'test'", "'scope'", "'programFiles'",
	"'input'", "'inputFiles'", "'assert'", "'noAnswerSet'",
	"'trueInAll'", "'atoms'", "'trueInAtLeast'", "'number'",
	"'trueInAtMost'", "'trueInExactly'", "'constraint'",
	"'constraintForAll'", "'constraintInAtLeast'", "'constraintInAtMost'",
	"'constraintInExactly'", "'bestModelCost'", "'cost'",
	"'level'", "'''", "'not'", "'%**'", "'**%'", null,
	null, null, null, "'_'", "'.'", "','", "'?'", "':'",
	"';'", "'|'", "':-'", "':~'", "'+'", "'-'", "'*'",
	"'/'", "'@'", "'('", "')'", "'['", "']'", "'{'", "'}'",
	"'='", null, "'<'", "'>'", "'<='", "'>='", "'#count'",
	"'#max'", "'#min'", "'#sum'", null, null, "'#'"];

var symbolicNames = [null, null, null, null, null, null, null, null, null,
	null, null, null, null, null, null, null, null, null,
	null, null, null, null, null, null, null, null, null,
	null, "SINGLE_QUOTE", "NAF", "DIRECTIVE_START", "DIRECTIVE_END",
	"ID", "VARIABLE", "STRING", "NUMBER", "ANONYMOUS_VARIABLE",
	"DOT", "COMMA", "QUERY_MARK", "COLON", "SEMICOLON",
	"OR", "CONS", "WCONS", "PLUS", "MINUS", "TIMES", "DIV",
	"AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN",
	"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "EQUAL",
	"UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ",
	"AGGREGATE_COUNT", "AGGREGATE_MAX", "AGGREGATE_MIN",
	"AGGREGATE_SUM", "MINIMIZE", "MAXIMIZE", "HASH", "BLANK",
	"MULTI_LINE_COMMENT", "LINE_COMMENT"];

var ruleNames = ["inizio", "program", "statements", "query", "statement",
	"statementsForTest", "entireBlockTest", "statementForTest",
	"testDirective", "nameEqual", "blockEqual", "listOfString",
	"startBlock", "endBlock", "inLineAnnotation", "ruleTest",
	"blockTest", "testTest", "programFilesTest", "inputTest",
	"inputFilesTest", "assertTest", "assertions", "assertion",
	"trueIn", "trueInAll", "trueInAtLeast", "trueInAtMost",
	"trueInExactly", "constraintIn", "constraintEqual", "constraintForAll",
	"constraintInAtLeast", "constraintInAtMost", "constraintInExactly",
	"bestModelCost", "head", "body", "disjunction", "choice",
	"choice_elements", "choice_element", "aggregate", "aggregate_elements",
	"aggregate_element", "aggregate_function", "optimize",
	"optimize_elements", "optimize_element", "optimize_function",
	"weight_at_level", "naf_literals", "naf_literal", "classical_literal",
	"builtin_atom", "binop", "terms", "term", "arithop"];

function ASPCore2_0cParser(input) {
	antlr4.Parser.call(this, input);
	this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
	this.ruleNames = ruleNames;
	this.literalNames = literalNames;
	this.symbolicNames = symbolicNames;
	return this;
}

ASPCore2_0cParser.prototype = Object.create(antlr4.Parser.prototype);
ASPCore2_0cParser.prototype.constructor = ASPCore2_0cParser;

Object.defineProperty(ASPCore2_0cParser.prototype, "atn", {
	get: function () {
		return atn;
	}
});

ASPCore2_0cParser.EOF = antlr4.Token.EOF;
ASPCore2_0cParser.T__0 = 1;
ASPCore2_0cParser.T__1 = 2;
ASPCore2_0cParser.T__2 = 3;
ASPCore2_0cParser.T__3 = 4;
ASPCore2_0cParser.T__4 = 5;
ASPCore2_0cParser.T__5 = 6;
ASPCore2_0cParser.T__6 = 7;
ASPCore2_0cParser.T__7 = 8;
ASPCore2_0cParser.T__8 = 9;
ASPCore2_0cParser.T__9 = 10;
ASPCore2_0cParser.T__10 = 11;
ASPCore2_0cParser.T__11 = 12;
ASPCore2_0cParser.T__12 = 13;
ASPCore2_0cParser.T__13 = 14;
ASPCore2_0cParser.T__14 = 15;
ASPCore2_0cParser.T__15 = 16;
ASPCore2_0cParser.T__16 = 17;
ASPCore2_0cParser.T__17 = 18;
ASPCore2_0cParser.T__18 = 19;
ASPCore2_0cParser.T__19 = 20;
ASPCore2_0cParser.T__20 = 21;
ASPCore2_0cParser.T__21 = 22;
ASPCore2_0cParser.T__22 = 23;
ASPCore2_0cParser.T__23 = 24;
ASPCore2_0cParser.T__24 = 25;
ASPCore2_0cParser.T__25 = 26;
ASPCore2_0cParser.T__26 = 27;
ASPCore2_0cParser.SINGLE_QUOTE = 28;
ASPCore2_0cParser.NAF = 29;
ASPCore2_0cParser.DIRECTIVE_START = 30;
ASPCore2_0cParser.DIRECTIVE_END = 31;
ASPCore2_0cParser.ID = 32;
ASPCore2_0cParser.VARIABLE = 33;
ASPCore2_0cParser.STRING = 34;
ASPCore2_0cParser.NUMBER = 35;
ASPCore2_0cParser.ANONYMOUS_VARIABLE = 36;
ASPCore2_0cParser.DOT = 37;
ASPCore2_0cParser.COMMA = 38;
ASPCore2_0cParser.QUERY_MARK = 39;
ASPCore2_0cParser.COLON = 40;
ASPCore2_0cParser.SEMICOLON = 41;
ASPCore2_0cParser.OR = 42;
ASPCore2_0cParser.CONS = 43;
ASPCore2_0cParser.WCONS = 44;
ASPCore2_0cParser.PLUS = 45;
ASPCore2_0cParser.MINUS = 46;
ASPCore2_0cParser.TIMES = 47;
ASPCore2_0cParser.DIV = 48;
ASPCore2_0cParser.AT = 49;
ASPCore2_0cParser.PAREN_OPEN = 50;
ASPCore2_0cParser.PAREN_CLOSE = 51;
ASPCore2_0cParser.SQUARE_OPEN = 52;
ASPCore2_0cParser.SQUARE_CLOSE = 53;
ASPCore2_0cParser.CURLY_OPEN = 54;
ASPCore2_0cParser.CURLY_CLOSE = 55;
ASPCore2_0cParser.EQUAL = 56;
ASPCore2_0cParser.UNEQUAL = 57;
ASPCore2_0cParser.LESS = 58;
ASPCore2_0cParser.GREATER = 59;
ASPCore2_0cParser.LESS_OR_EQ = 60;
ASPCore2_0cParser.GREATER_OR_EQ = 61;
ASPCore2_0cParser.AGGREGATE_COUNT = 62;
ASPCore2_0cParser.AGGREGATE_MAX = 63;
ASPCore2_0cParser.AGGREGATE_MIN = 64;
ASPCore2_0cParser.AGGREGATE_SUM = 65;
ASPCore2_0cParser.MINIMIZE = 66;
ASPCore2_0cParser.MAXIMIZE = 67;
ASPCore2_0cParser.HASH = 68;
ASPCore2_0cParser.BLANK = 69;
ASPCore2_0cParser.MULTI_LINE_COMMENT = 70;
ASPCore2_0cParser.LINE_COMMENT = 71;

ASPCore2_0cParser.RULE_inizio = 0;
ASPCore2_0cParser.RULE_program = 1;
ASPCore2_0cParser.RULE_statements = 2;
ASPCore2_0cParser.RULE_query = 3;
ASPCore2_0cParser.RULE_statement = 4;
ASPCore2_0cParser.RULE_statementsForTest = 5;
ASPCore2_0cParser.RULE_entireBlockTest = 6;
ASPCore2_0cParser.RULE_statementForTest = 7;
ASPCore2_0cParser.RULE_testDirective = 8;
ASPCore2_0cParser.RULE_nameEqual = 9;
ASPCore2_0cParser.RULE_blockEqual = 10;
ASPCore2_0cParser.RULE_listOfString = 11;
ASPCore2_0cParser.RULE_startBlock = 12;
ASPCore2_0cParser.RULE_endBlock = 13;
ASPCore2_0cParser.RULE_inLineAnnotation = 14;
ASPCore2_0cParser.RULE_ruleTest = 15;
ASPCore2_0cParser.RULE_blockTest = 16;
ASPCore2_0cParser.RULE_testTest = 17;
ASPCore2_0cParser.RULE_programFilesTest = 18;
ASPCore2_0cParser.RULE_inputTest = 19;
ASPCore2_0cParser.RULE_inputFilesTest = 20;
ASPCore2_0cParser.RULE_assertTest = 21;
ASPCore2_0cParser.RULE_assertions = 22;
ASPCore2_0cParser.RULE_assertion = 23;
ASPCore2_0cParser.RULE_trueIn = 24;
ASPCore2_0cParser.RULE_trueInAll = 25;
ASPCore2_0cParser.RULE_trueInAtLeast = 26;
ASPCore2_0cParser.RULE_trueInAtMost = 27;
ASPCore2_0cParser.RULE_trueInExactly = 28;
ASPCore2_0cParser.RULE_constraintIn = 29;
ASPCore2_0cParser.RULE_constraintEqual = 30;
ASPCore2_0cParser.RULE_constraintForAll = 31;
ASPCore2_0cParser.RULE_constraintInAtLeast = 32;
ASPCore2_0cParser.RULE_constraintInAtMost = 33;
ASPCore2_0cParser.RULE_constraintInExactly = 34;
ASPCore2_0cParser.RULE_bestModelCost = 35;
ASPCore2_0cParser.RULE_head = 36;
ASPCore2_0cParser.RULE_body = 37;
ASPCore2_0cParser.RULE_disjunction = 38;
ASPCore2_0cParser.RULE_choice = 39;
ASPCore2_0cParser.RULE_choice_elements = 40;
ASPCore2_0cParser.RULE_choice_element = 41;
ASPCore2_0cParser.RULE_aggregate = 42;
ASPCore2_0cParser.RULE_aggregate_elements = 43;
ASPCore2_0cParser.RULE_aggregate_element = 44;
ASPCore2_0cParser.RULE_aggregate_function = 45;
ASPCore2_0cParser.RULE_optimize = 46;
ASPCore2_0cParser.RULE_optimize_elements = 47;
ASPCore2_0cParser.RULE_optimize_element = 48;
ASPCore2_0cParser.RULE_optimize_function = 49;
ASPCore2_0cParser.RULE_weight_at_level = 50;
ASPCore2_0cParser.RULE_naf_literals = 51;
ASPCore2_0cParser.RULE_naf_literal = 52;
ASPCore2_0cParser.RULE_classical_literal = 53;
ASPCore2_0cParser.RULE_builtin_atom = 54;
ASPCore2_0cParser.RULE_binop = 55;
ASPCore2_0cParser.RULE_terms = 56;
ASPCore2_0cParser.RULE_term = 57;
ASPCore2_0cParser.RULE_arithop = 58;


function InizioContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_inizio;
	return this;
}

InizioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InizioContext.prototype.constructor = InizioContext;

InizioContext.prototype.program = function () {
	return this.getTypedRuleContext(ProgramContext, 0);
};

InizioContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterInizio(this);
	}
};

InizioContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitInizio(this);
	}
};


ASPCore2_0cParser.InizioContext = InizioContext;

ASPCore2_0cParser.prototype.inizio = function () {

	var localctx = new InizioContext(this, this._ctx, this.state);
	this.enterRule(localctx, 0, ASPCore2_0cParser.RULE_inizio);
	try {
		this.state = 120;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.DIRECTIVE_START:
			case ASPCore2_0cParser.ID:
			case ASPCore2_0cParser.VARIABLE:
			case ASPCore2_0cParser.STRING:
			case ASPCore2_0cParser.NUMBER:
			case ASPCore2_0cParser.ANONYMOUS_VARIABLE:
			case ASPCore2_0cParser.CONS:
			case ASPCore2_0cParser.WCONS:
			case ASPCore2_0cParser.MINUS:
			case ASPCore2_0cParser.PAREN_OPEN:
			case ASPCore2_0cParser.CURLY_OPEN:
			case ASPCore2_0cParser.MINIMIZE:
			case ASPCore2_0cParser.MAXIMIZE:
				this.enterOuterAlt(localctx, 1);
				this.state = 118;
				this.program();
				break;
			case ASPCore2_0cParser.EOF:
				this.enterOuterAlt(localctx, 2);

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ProgramContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_program;
	return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.statements = function () {
	return this.getTypedRuleContext(StatementsContext, 0);
};

ProgramContext.prototype.query = function () {
	return this.getTypedRuleContext(QueryContext, 0);
};

ProgramContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitProgram(this);
	}
};


ASPCore2_0cParser.ProgramContext = ProgramContext;

ASPCore2_0cParser.prototype.program = function () {

	var localctx = new ProgramContext(this, this._ctx, this.state);
	this.enterRule(localctx, 2, ASPCore2_0cParser.RULE_program);
	try {
		this.state = 127;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 122;
				this.statements();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 123;
				this.query();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 124;
				this.statements();
				this.state = 125;
				this.query();
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_statements;
	return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function () {
	return this.getTypedRuleContext(StatementContext, 0);
};

StatementsContext.prototype.statements = function () {
	return this.getTypedRuleContext(StatementsContext, 0);
};

StatementsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitStatements(this);
	}
};


ASPCore2_0cParser.StatementsContext = StatementsContext;

ASPCore2_0cParser.prototype.statements = function () {

	var localctx = new StatementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 4, ASPCore2_0cParser.RULE_statements);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 129;
		this.statement();
		this.state = 131;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
		if (la_ === 1) {
			this.state = 130;
			this.statements();

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_query;
	return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.classical_literal = function () {
	return this.getTypedRuleContext(Classical_literalContext, 0);
};

QueryContext.prototype.QUERY_MARK = function () {
	return this.getToken(ASPCore2_0cParser.QUERY_MARK, 0);
};

QueryContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitQuery(this);
	}
};


ASPCore2_0cParser.QueryContext = QueryContext;

ASPCore2_0cParser.prototype.query = function () {

	var localctx = new QueryContext(this, this._ctx, this.state);
	this.enterRule(localctx, 6, ASPCore2_0cParser.RULE_query);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 133;
		this.classical_literal();
		this.state = 134;
		this.match(ASPCore2_0cParser.QUERY_MARK);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_statement;
	return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.CONS = function () {
	return this.getToken(ASPCore2_0cParser.CONS, 0);
};

StatementContext.prototype.DOT = function () {
	return this.getToken(ASPCore2_0cParser.DOT, 0);
};

StatementContext.prototype.body = function () {
	return this.getTypedRuleContext(BodyContext, 0);
};

StatementContext.prototype.head = function () {
	return this.getTypedRuleContext(HeadContext, 0);
};

StatementContext.prototype.WCONS = function () {
	return this.getToken(ASPCore2_0cParser.WCONS, 0);
};

StatementContext.prototype.SQUARE_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.SQUARE_OPEN, 0);
};

StatementContext.prototype.weight_at_level = function () {
	return this.getTypedRuleContext(Weight_at_levelContext, 0);
};

StatementContext.prototype.SQUARE_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.SQUARE_CLOSE, 0);
};

StatementContext.prototype.optimize = function () {
	return this.getTypedRuleContext(OptimizeContext, 0);
};

StatementContext.prototype.testDirective = function () {
	return this.getTypedRuleContext(TestDirectiveContext, 0);
};

StatementContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitStatement(this);
	}
};


ASPCore2_0cParser.StatementContext = StatementContext;

ASPCore2_0cParser.prototype.statement = function () {

	var localctx = new StatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 8, ASPCore2_0cParser.RULE_statement);
	var _la = 0; // Token type
	try {
		this.state = 173;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 136;
				this.match(ASPCore2_0cParser.CONS);
				this.state = 138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 137;
					this.body();
				}

				this.state = 140;
				this.match(ASPCore2_0cParser.DOT);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 141;
				this.head();
				this.state = 146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.CONS) {
					this.state = 142;
					this.match(ASPCore2_0cParser.CONS);
					this.state = 144;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
						this.state = 143;
						this.body();
					}

				}

				this.state = 148;
				this.match(ASPCore2_0cParser.DOT);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 150;
				this.match(ASPCore2_0cParser.WCONS);
				this.state = 152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 151;
					this.body();
				}

				this.state = 154;
				this.match(ASPCore2_0cParser.DOT);
				this.state = 155;
				this.match(ASPCore2_0cParser.SQUARE_OPEN);
				this.state = 156;
				this.weight_at_level();
				this.state = 157;
				this.match(ASPCore2_0cParser.SQUARE_CLOSE);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 159;
				this.match(ASPCore2_0cParser.WCONS);
				this.state = 161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 160;
					this.body();
				}

				this.state = 163;
				this.match(ASPCore2_0cParser.SQUARE_OPEN);
				this.state = 164;
				this.weight_at_level();
				this.state = 165;
				this.match(ASPCore2_0cParser.SQUARE_CLOSE);
				this.state = 166;
				this.match(ASPCore2_0cParser.DOT);
				this.notifyErrorListeners("Syntax error: DOT must be before [weight@level]");
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 169;
				this.optimize();
				this.state = 170;
				this.match(ASPCore2_0cParser.DOT);
				break;

			case 6:
				this.enterOuterAlt(localctx, 6);
				this.state = 172;
				this.testDirective();
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function StatementsForTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_statementsForTest;
	return this;
}

StatementsForTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsForTestContext.prototype.constructor = StatementsForTestContext;

StatementsForTestContext.prototype.statementForTest = function () {
	return this.getTypedRuleContext(StatementForTestContext, 0);
};

StatementsForTestContext.prototype.statementsForTest = function () {
	return this.getTypedRuleContext(StatementsForTestContext, 0);
};

StatementsForTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterStatementsForTest(this);
	}
};

StatementsForTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitStatementsForTest(this);
	}
};


ASPCore2_0cParser.StatementsForTestContext = StatementsForTestContext;

ASPCore2_0cParser.prototype.statementsForTest = function () {

	var localctx = new StatementsForTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 10, ASPCore2_0cParser.RULE_statementsForTest);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 175;
		this.statementForTest();
		this.state = 177;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.CONS - 32)) | (1 << (ASPCore2_0cParser.WCONS - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)) | (1 << (ASPCore2_0cParser.CURLY_OPEN - 32)))) !== 0) || _la === ASPCore2_0cParser.MINIMIZE || _la === ASPCore2_0cParser.MAXIMIZE) {
			this.state = 176;
			this.statementsForTest();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function EntireBlockTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_entireBlockTest;
	return this;
}

EntireBlockTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntireBlockTestContext.prototype.constructor = EntireBlockTestContext;

EntireBlockTestContext.prototype.startBlock = function () {
	return this.getTypedRuleContext(StartBlockContext, 0);
};

EntireBlockTestContext.prototype.statementsForTest = function () {
	return this.getTypedRuleContext(StatementsForTestContext, 0);
};

EntireBlockTestContext.prototype.endBlock = function () {
	return this.getTypedRuleContext(EndBlockContext, 0);
};

EntireBlockTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterEntireBlockTest(this);
	}
};

EntireBlockTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitEntireBlockTest(this);
	}
};


ASPCore2_0cParser.EntireBlockTestContext = EntireBlockTestContext;

ASPCore2_0cParser.prototype.entireBlockTest = function () {

	var localctx = new EntireBlockTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 12, ASPCore2_0cParser.RULE_entireBlockTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 179;
		this.startBlock();
		this.state = 180;
		this.statementsForTest();
		this.state = 181;
		this.endBlock();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function StatementForTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_statementForTest;
	return this;
}

StatementForTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementForTestContext.prototype.constructor = StatementForTestContext;

StatementForTestContext.prototype.CONS = function () {
	return this.getToken(ASPCore2_0cParser.CONS, 0);
};

StatementForTestContext.prototype.DOT = function () {
	return this.getToken(ASPCore2_0cParser.DOT, 0);
};

StatementForTestContext.prototype.body = function () {
	return this.getTypedRuleContext(BodyContext, 0);
};

StatementForTestContext.prototype.head = function () {
	return this.getTypedRuleContext(HeadContext, 0);
};

StatementForTestContext.prototype.WCONS = function () {
	return this.getToken(ASPCore2_0cParser.WCONS, 0);
};

StatementForTestContext.prototype.SQUARE_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.SQUARE_OPEN, 0);
};

StatementForTestContext.prototype.weight_at_level = function () {
	return this.getTypedRuleContext(Weight_at_levelContext, 0);
};

StatementForTestContext.prototype.SQUARE_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.SQUARE_CLOSE, 0);
};

StatementForTestContext.prototype.optimize = function () {
	return this.getTypedRuleContext(OptimizeContext, 0);
};

StatementForTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterStatementForTest(this);
	}
};

StatementForTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitStatementForTest(this);
	}
};


ASPCore2_0cParser.StatementForTestContext = StatementForTestContext;

ASPCore2_0cParser.prototype.statementForTest = function () {

	var localctx = new StatementForTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 14, ASPCore2_0cParser.RULE_statementForTest);
	var _la = 0; // Token type
	try {
		this.state = 219;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 183;
				this.match(ASPCore2_0cParser.CONS);
				this.state = 185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 184;
					this.body();
				}

				this.state = 187;
				this.match(ASPCore2_0cParser.DOT);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 188;
				this.head();
				this.state = 193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.CONS) {
					this.state = 189;
					this.match(ASPCore2_0cParser.CONS);
					this.state = 191;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
						this.state = 190;
						this.body();
					}

				}

				this.state = 195;
				this.match(ASPCore2_0cParser.DOT);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 197;
				this.match(ASPCore2_0cParser.WCONS);
				this.state = 199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 198;
					this.body();
				}

				this.state = 201;
				this.match(ASPCore2_0cParser.DOT);
				this.state = 202;
				this.match(ASPCore2_0cParser.SQUARE_OPEN);
				this.state = 203;
				this.weight_at_level();
				this.state = 204;
				this.match(ASPCore2_0cParser.SQUARE_CLOSE);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 206;
				this.match(ASPCore2_0cParser.WCONS);
				this.state = 208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
					this.state = 207;
					this.body();
				}

				this.state = 210;
				this.match(ASPCore2_0cParser.SQUARE_OPEN);
				this.state = 211;
				this.weight_at_level();
				this.state = 212;
				this.match(ASPCore2_0cParser.SQUARE_CLOSE);
				this.state = 213;
				this.match(ASPCore2_0cParser.DOT);
				this.notifyErrorListeners("Syntax error: DOT must be before [weight@level]");
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 216;
				this.optimize();
				this.state = 217;
				this.match(ASPCore2_0cParser.DOT);
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TestDirectiveContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_testDirective;
	return this;
}

TestDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestDirectiveContext.prototype.constructor = TestDirectiveContext;

TestDirectiveContext.prototype.DIRECTIVE_START = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_START, 0);
};

TestDirectiveContext.prototype.inLineAnnotation = function () {
	return this.getTypedRuleContext(InLineAnnotationContext, 0);
};

TestDirectiveContext.prototype.DIRECTIVE_END = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_END, 0);
};

TestDirectiveContext.prototype.entireBlockTest = function () {
	return this.getTypedRuleContext(EntireBlockTestContext, 0);
};

TestDirectiveContext.prototype.ruleTest = function () {
	return this.getTypedRuleContext(RuleTestContext, 0);
};

TestDirectiveContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTestDirective(this);
	}
};

TestDirectiveContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTestDirective(this);
	}
};


ASPCore2_0cParser.TestDirectiveContext = TestDirectiveContext;

ASPCore2_0cParser.prototype.testDirective = function () {

	var localctx = new TestDirectiveContext(this, this._ctx, this.state);
	this.enterRule(localctx, 16, ASPCore2_0cParser.RULE_testDirective);
	try {
		this.state = 227;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 221;
				this.match(ASPCore2_0cParser.DIRECTIVE_START);
				this.state = 222;
				this.inLineAnnotation();
				this.state = 223;
				this.match(ASPCore2_0cParser.DIRECTIVE_END);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 225;
				this.entireBlockTest();
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 226;
				this.ruleTest();
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function NameEqualContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_nameEqual;
	return this;
}

NameEqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameEqualContext.prototype.constructor = NameEqualContext;

NameEqualContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

NameEqualContext.prototype.STRING = function () {
	return this.getToken(ASPCore2_0cParser.STRING, 0);
};

NameEqualContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterNameEqual(this);
	}
};

NameEqualContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitNameEqual(this);
	}
};


ASPCore2_0cParser.NameEqualContext = NameEqualContext;

ASPCore2_0cParser.prototype.nameEqual = function () {

	var localctx = new NameEqualContext(this, this._ctx, this.state);
	this.enterRule(localctx, 18, ASPCore2_0cParser.RULE_nameEqual);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 229;
		this.match(ASPCore2_0cParser.T__0);
		this.state = 230;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 231;
		this.match(ASPCore2_0cParser.STRING);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function BlockEqualContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_blockEqual;
	return this;
}

BlockEqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockEqualContext.prototype.constructor = BlockEqualContext;

BlockEqualContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

BlockEqualContext.prototype.STRING = function () {
	return this.getToken(ASPCore2_0cParser.STRING, 0);
};

BlockEqualContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBlockEqual(this);
	}
};

BlockEqualContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBlockEqual(this);
	}
};


ASPCore2_0cParser.BlockEqualContext = BlockEqualContext;

ASPCore2_0cParser.prototype.blockEqual = function () {

	var localctx = new BlockEqualContext(this, this._ctx, this.state);
	this.enterRule(localctx, 20, ASPCore2_0cParser.RULE_blockEqual);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 233;
		this.match(ASPCore2_0cParser.T__1);
		this.state = 234;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 235;
		this.match(ASPCore2_0cParser.STRING);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ListOfStringContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_listOfString;
	return this;
}

ListOfStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListOfStringContext.prototype.constructor = ListOfStringContext;

ListOfStringContext.prototype.CURLY_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_OPEN, 0);
};

ListOfStringContext.prototype.CURLY_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_CLOSE, 0);
};

ListOfStringContext.prototype.STRING = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.STRING);
	} else {
		return this.getToken(ASPCore2_0cParser.STRING, i);
	}
};


ListOfStringContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.COMMA);
	} else {
		return this.getToken(ASPCore2_0cParser.COMMA, i);
	}
};


ListOfStringContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterListOfString(this);
	}
};

ListOfStringContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitListOfString(this);
	}
};


ASPCore2_0cParser.ListOfStringContext = ListOfStringContext;

ASPCore2_0cParser.prototype.listOfString = function () {

	var localctx = new ListOfStringContext(this, this._ctx, this.state);
	this.enterRule(localctx, 22, ASPCore2_0cParser.RULE_listOfString);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 237;
		this.match(ASPCore2_0cParser.CURLY_OPEN);
		this.state = 242;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 238;
			this.match(ASPCore2_0cParser.STRING);
			this.state = 240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === ASPCore2_0cParser.COMMA) {
				this.state = 239;
				this.match(ASPCore2_0cParser.COMMA);
			}

			this.state = 244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === ASPCore2_0cParser.STRING);
		this.state = 246;
		this.match(ASPCore2_0cParser.CURLY_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function StartBlockContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_startBlock;
	return this;
}

StartBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartBlockContext.prototype.constructor = StartBlockContext;

StartBlockContext.prototype.DIRECTIVE_START = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_START, 0);
};

StartBlockContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

StartBlockContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

StartBlockContext.prototype.nameEqual = function () {
	return this.getTypedRuleContext(NameEqualContext, 0);
};

StartBlockContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

StartBlockContext.prototype.DIRECTIVE_END = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_END, 0);
};

StartBlockContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterStartBlock(this);
	}
};

StartBlockContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitStartBlock(this);
	}
};


ASPCore2_0cParser.StartBlockContext = StartBlockContext;

ASPCore2_0cParser.prototype.startBlock = function () {

	var localctx = new StartBlockContext(this, this._ctx, this.state);
	this.enterRule(localctx, 24, ASPCore2_0cParser.RULE_startBlock);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 248;
		this.match(ASPCore2_0cParser.DIRECTIVE_START);
		this.state = 249;
		this.match(ASPCore2_0cParser.AT);
		this.state = 250;
		this.match(ASPCore2_0cParser.T__2);
		this.state = 251;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 252;
		this.nameEqual();
		this.state = 253;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
		this.state = 254;
		this.match(ASPCore2_0cParser.DIRECTIVE_END);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function EndBlockContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_endBlock;
	return this;
}

EndBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndBlockContext.prototype.constructor = EndBlockContext;

EndBlockContext.prototype.DIRECTIVE_START = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_START, 0);
};

EndBlockContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

EndBlockContext.prototype.DIRECTIVE_END = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_END, 0);
};

EndBlockContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterEndBlock(this);
	}
};

EndBlockContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitEndBlock(this);
	}
};


ASPCore2_0cParser.EndBlockContext = EndBlockContext;

ASPCore2_0cParser.prototype.endBlock = function () {

	var localctx = new EndBlockContext(this, this._ctx, this.state);
	this.enterRule(localctx, 26, ASPCore2_0cParser.RULE_endBlock);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 256;
		this.match(ASPCore2_0cParser.DIRECTIVE_START);
		this.state = 257;
		this.match(ASPCore2_0cParser.AT);
		this.state = 258;
		this.match(ASPCore2_0cParser.T__3);
		this.state = 259;
		this.match(ASPCore2_0cParser.DIRECTIVE_END);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function InLineAnnotationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_inLineAnnotation;
	return this;
}

InLineAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InLineAnnotationContext.prototype.constructor = InLineAnnotationContext;

InLineAnnotationContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

InLineAnnotationContext.prototype.blockTest = function () {
	return this.getTypedRuleContext(BlockTestContext, 0);
};

InLineAnnotationContext.prototype.testTest = function () {
	return this.getTypedRuleContext(TestTestContext, 0);
};

InLineAnnotationContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterInLineAnnotation(this);
	}
};

InLineAnnotationContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitInLineAnnotation(this);
	}
};


ASPCore2_0cParser.InLineAnnotationContext = InLineAnnotationContext;

ASPCore2_0cParser.prototype.inLineAnnotation = function () {

	var localctx = new InLineAnnotationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 28, ASPCore2_0cParser.RULE_inLineAnnotation);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 261;
		this.match(ASPCore2_0cParser.AT);
		this.state = 264;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.T__1:
				this.state = 262;
				this.blockTest();
				break;
			case ASPCore2_0cParser.T__6:
				this.state = 263;
				this.testTest();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function RuleTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_ruleTest;
	return this;
}

RuleTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleTestContext.prototype.constructor = RuleTestContext;

RuleTestContext.prototype.DIRECTIVE_START = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_START, 0);
};

RuleTestContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

RuleTestContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

RuleTestContext.prototype.nameEqual = function () {
	return this.getTypedRuleContext(NameEqualContext, 0);
};

RuleTestContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

RuleTestContext.prototype.DIRECTIVE_END = function () {
	return this.getToken(ASPCore2_0cParser.DIRECTIVE_END, 0);
};

RuleTestContext.prototype.statementForTest = function () {
	return this.getTypedRuleContext(StatementForTestContext, 0);
};

RuleTestContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

RuleTestContext.prototype.blockEqual = function () {
	return this.getTypedRuleContext(BlockEqualContext, 0);
};

RuleTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterRuleTest(this);
	}
};

RuleTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitRuleTest(this);
	}
};


ASPCore2_0cParser.RuleTestContext = RuleTestContext;

ASPCore2_0cParser.prototype.ruleTest = function () {

	var localctx = new RuleTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 30, ASPCore2_0cParser.RULE_ruleTest);
	var _la = 0; // Token type
	try {
		this.state = 292;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 266;
				this.match(ASPCore2_0cParser.DIRECTIVE_START);
				this.state = 267;
				this.match(ASPCore2_0cParser.AT);
				this.state = 268;
				this.match(ASPCore2_0cParser.T__4);
				this.state = 269;
				this.match(ASPCore2_0cParser.PAREN_OPEN);
				this.state = 270;
				this.nameEqual();
				this.state = 273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.COMMA) {
					this.state = 271;
					this.match(ASPCore2_0cParser.COMMA);
					this.state = 272;
					this.blockEqual();
				}

				this.state = 275;
				this.match(ASPCore2_0cParser.PAREN_CLOSE);
				this.state = 276;
				this.match(ASPCore2_0cParser.DIRECTIVE_END);
				this.state = 277;
				this.statementForTest();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 279;
				this.match(ASPCore2_0cParser.DIRECTIVE_START);
				this.state = 280;
				this.match(ASPCore2_0cParser.AT);
				this.state = 281;
				this.match(ASPCore2_0cParser.T__4);
				this.state = 282;
				this.match(ASPCore2_0cParser.PAREN_OPEN);
				this.state = 283;
				this.nameEqual();
				this.state = 286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.COMMA) {
					this.state = 284;
					this.match(ASPCore2_0cParser.COMMA);
					this.state = 285;
					this.blockEqual();
				}

				this.state = 288;
				this.match(ASPCore2_0cParser.PAREN_CLOSE);
				this.state = 289;
				this.match(ASPCore2_0cParser.DIRECTIVE_END);
				this.notifyErrorListeners("Missing rule after @rule");
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function BlockTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_blockTest;
	return this;
}

BlockTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockTestContext.prototype.constructor = BlockTestContext;

BlockTestContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

BlockTestContext.prototype.nameEqual = function () {
	return this.getTypedRuleContext(NameEqualContext, 0);
};

BlockTestContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

BlockTestContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

BlockTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

BlockTestContext.prototype.listOfString = function () {
	return this.getTypedRuleContext(ListOfStringContext, 0);
};

BlockTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBlockTest(this);
	}
};

BlockTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBlockTest(this);
	}
};


ASPCore2_0cParser.BlockTestContext = BlockTestContext;

ASPCore2_0cParser.prototype.blockTest = function () {

	var localctx = new BlockTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 32, ASPCore2_0cParser.RULE_blockTest);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 294;
		this.match(ASPCore2_0cParser.T__1);
		this.state = 295;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 296;
		this.nameEqual();
		this.state = 301;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COMMA) {
			this.state = 297;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 298;
			this.match(ASPCore2_0cParser.T__5);
			this.state = 299;
			this.match(ASPCore2_0cParser.EQUAL);
			this.state = 300;
			this.listOfString();
		}

		this.state = 303;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TestTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_testTest;
	return this;
}

TestTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestTestContext.prototype.constructor = TestTestContext;

TestTestContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TestTestContext.prototype.nameEqual = function () {
	return this.getTypedRuleContext(NameEqualContext, 0);
};

TestTestContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.COMMA);
	} else {
		return this.getToken(ASPCore2_0cParser.COMMA, i);
	}
};


TestTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

TestTestContext.prototype.listOfString = function () {
	return this.getTypedRuleContext(ListOfStringContext, 0);
};

TestTestContext.prototype.assertTest = function () {
	return this.getTypedRuleContext(AssertTestContext, 0);
};

TestTestContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TestTestContext.prototype.programFilesTest = function () {
	return this.getTypedRuleContext(ProgramFilesTestContext, 0);
};

TestTestContext.prototype.inputTest = function () {
	return this.getTypedRuleContext(InputTestContext, 0);
};

TestTestContext.prototype.inputFilesTest = function () {
	return this.getTypedRuleContext(InputFilesTestContext, 0);
};

TestTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTestTest(this);
	}
};

TestTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTestTest(this);
	}
};


ASPCore2_0cParser.TestTestContext = TestTestContext;

ASPCore2_0cParser.prototype.testTest = function () {

	var localctx = new TestTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 34, ASPCore2_0cParser.RULE_testTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 305;
		this.match(ASPCore2_0cParser.T__6);
		this.state = 306;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 307;
		this.nameEqual();
		this.state = 308;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 309;
		this.match(ASPCore2_0cParser.T__7);
		this.state = 310;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 311;
		this.listOfString();
		this.state = 314;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
		if (la_ === 1) {
			this.state = 312;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 313;
			this.programFilesTest();

		}
		this.state = 318;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);
		if (la_ === 1) {
			this.state = 316;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 317;
			this.inputTest();

		}
		this.state = 322;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
		if (la_ === 1) {
			this.state = 320;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 321;
			this.inputFilesTest();

		}
		this.state = 324;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 325;
		this.assertTest();
		this.state = 326;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ProgramFilesTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_programFilesTest;
	return this;
}

ProgramFilesTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramFilesTestContext.prototype.constructor = ProgramFilesTestContext;

ProgramFilesTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

ProgramFilesTestContext.prototype.listOfString = function () {
	return this.getTypedRuleContext(ListOfStringContext, 0);
};

ProgramFilesTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterProgramFilesTest(this);
	}
};

ProgramFilesTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitProgramFilesTest(this);
	}
};


ASPCore2_0cParser.ProgramFilesTestContext = ProgramFilesTestContext;

ASPCore2_0cParser.prototype.programFilesTest = function () {

	var localctx = new ProgramFilesTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 36, ASPCore2_0cParser.RULE_programFilesTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 328;
		this.match(ASPCore2_0cParser.T__8);
		this.state = 329;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 330;
		this.listOfString();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function InputTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_inputTest;
	return this;
}

InputTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputTestContext.prototype.constructor = InputTestContext;

InputTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

InputTestContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


InputTestContext.prototype.statementsForTest = function () {
	return this.getTypedRuleContext(StatementsForTestContext, 0);
};

InputTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterInputTest(this);
	}
};

InputTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitInputTest(this);
	}
};


ASPCore2_0cParser.InputTestContext = InputTestContext;

ASPCore2_0cParser.prototype.inputTest = function () {

	var localctx = new InputTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 38, ASPCore2_0cParser.RULE_inputTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 332;
		this.match(ASPCore2_0cParser.T__9);
		this.state = 333;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 334;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 335;
		this.statementsForTest();
		this.state = 336;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function InputFilesTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_inputFilesTest;
	return this;
}

InputFilesTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputFilesTestContext.prototype.constructor = InputFilesTestContext;

InputFilesTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

InputFilesTestContext.prototype.listOfString = function () {
	return this.getTypedRuleContext(ListOfStringContext, 0);
};

InputFilesTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterInputFilesTest(this);
	}
};

InputFilesTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitInputFilesTest(this);
	}
};


ASPCore2_0cParser.InputFilesTestContext = InputFilesTestContext;

ASPCore2_0cParser.prototype.inputFilesTest = function () {

	var localctx = new InputFilesTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 40, ASPCore2_0cParser.RULE_inputFilesTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 338;
		this.match(ASPCore2_0cParser.T__10);
		this.state = 339;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 340;
		this.listOfString();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function AssertTestContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_assertTest;
	return this;
}

AssertTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertTestContext.prototype.constructor = AssertTestContext;

AssertTestContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

AssertTestContext.prototype.CURLY_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_OPEN, 0);
};

AssertTestContext.prototype.assertions = function () {
	return this.getTypedRuleContext(AssertionsContext, 0);
};

AssertTestContext.prototype.CURLY_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_CLOSE, 0);
};

AssertTestContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAssertTest(this);
	}
};

AssertTestContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAssertTest(this);
	}
};


ASPCore2_0cParser.AssertTestContext = AssertTestContext;

ASPCore2_0cParser.prototype.assertTest = function () {

	var localctx = new AssertTestContext(this, this._ctx, this.state);
	this.enterRule(localctx, 42, ASPCore2_0cParser.RULE_assertTest);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 342;
		this.match(ASPCore2_0cParser.T__11);
		this.state = 343;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 344;
		this.match(ASPCore2_0cParser.CURLY_OPEN);
		this.state = 345;
		this.assertions();
		this.state = 346;
		this.match(ASPCore2_0cParser.CURLY_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function AssertionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_assertions;
	return this;
}

AssertionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionsContext.prototype.constructor = AssertionsContext;

AssertionsContext.prototype.assertion = function () {
	return this.getTypedRuleContext(AssertionContext, 0);
};

AssertionsContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

AssertionsContext.prototype.assertions = function () {
	return this.getTypedRuleContext(AssertionsContext, 0);
};

AssertionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAssertions(this);
	}
};

AssertionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAssertions(this);
	}
};


ASPCore2_0cParser.AssertionsContext = AssertionsContext;

ASPCore2_0cParser.prototype.assertions = function () {

	var localctx = new AssertionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 44, ASPCore2_0cParser.RULE_assertions);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 348;
		this.assertion();
		this.state = 351;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COMMA) {
			this.state = 349;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 350;
			this.assertions();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function AssertionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_assertion;
	return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

AssertionContext.prototype.trueIn = function () {
	return this.getTypedRuleContext(TrueInContext, 0);
};

AssertionContext.prototype.constraintIn = function () {
	return this.getTypedRuleContext(ConstraintInContext, 0);
};

AssertionContext.prototype.bestModelCost = function () {
	return this.getTypedRuleContext(BestModelCostContext, 0);
};

AssertionContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAssertion(this);
	}
};


ASPCore2_0cParser.AssertionContext = AssertionContext;

ASPCore2_0cParser.prototype.assertion = function () {

	var localctx = new AssertionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 46, ASPCore2_0cParser.RULE_assertion);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 353;
		this.match(ASPCore2_0cParser.AT);
		this.state = 358;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.T__12:
				this.state = 354;
				this.match(ASPCore2_0cParser.T__12);
				break;
			case ASPCore2_0cParser.T__13:
			case ASPCore2_0cParser.T__15:
			case ASPCore2_0cParser.T__17:
			case ASPCore2_0cParser.T__18:
				this.state = 355;
				this.trueIn();
				break;
			case ASPCore2_0cParser.T__20:
			case ASPCore2_0cParser.T__21:
			case ASPCore2_0cParser.T__22:
			case ASPCore2_0cParser.T__23:
				this.state = 356;
				this.constraintIn();
				break;
			case ASPCore2_0cParser.T__24:
				this.state = 357;
				this.bestModelCost();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TrueInContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_trueIn;
	return this;
}

TrueInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrueInContext.prototype.constructor = TrueInContext;

TrueInContext.prototype.trueInAll = function () {
	return this.getTypedRuleContext(TrueInAllContext, 0);
};

TrueInContext.prototype.trueInAtLeast = function () {
	return this.getTypedRuleContext(TrueInAtLeastContext, 0);
};

TrueInContext.prototype.trueInAtMost = function () {
	return this.getTypedRuleContext(TrueInAtMostContext, 0);
};

TrueInContext.prototype.trueInExactly = function () {
	return this.getTypedRuleContext(TrueInExactlyContext, 0);
};

TrueInContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTrueIn(this);
	}
};

TrueInContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTrueIn(this);
	}
};


ASPCore2_0cParser.TrueInContext = TrueInContext;

ASPCore2_0cParser.prototype.trueIn = function () {

	var localctx = new TrueInContext(this, this._ctx, this.state);
	this.enterRule(localctx, 48, ASPCore2_0cParser.RULE_trueIn);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 364;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.T__13:
				this.state = 360;
				this.trueInAll();
				break;
			case ASPCore2_0cParser.T__15:
				this.state = 361;
				this.trueInAtLeast();
				break;
			case ASPCore2_0cParser.T__17:
				this.state = 362;
				this.trueInAtMost();
				break;
			case ASPCore2_0cParser.T__18:
				this.state = 363;
				this.trueInExactly();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TrueInAllContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_trueInAll;
	return this;
}

TrueInAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrueInAllContext.prototype.constructor = TrueInAllContext;

TrueInAllContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TrueInAllContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

TrueInAllContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


TrueInAllContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TrueInAllContext.prototype.classical_literal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Classical_literalContext);
	} else {
		return this.getTypedRuleContext(Classical_literalContext, i);
	}
};

TrueInAllContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.DOT);
	} else {
		return this.getToken(ASPCore2_0cParser.DOT, i);
	}
};


TrueInAllContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTrueInAll(this);
	}
};

TrueInAllContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTrueInAll(this);
	}
};


ASPCore2_0cParser.TrueInAllContext = TrueInAllContext;

ASPCore2_0cParser.prototype.trueInAll = function () {

	var localctx = new TrueInAllContext(this, this._ctx, this.state);
	this.enterRule(localctx, 50, ASPCore2_0cParser.RULE_trueInAll);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 366;
		this.match(ASPCore2_0cParser.T__13);
		this.state = 367;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 368;
		this.match(ASPCore2_0cParser.T__14);
		this.state = 369;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 370;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 374;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 371;
			this.classical_literal();
			this.state = 372;
			this.match(ASPCore2_0cParser.DOT);
			this.state = 376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === ASPCore2_0cParser.ID || _la === ASPCore2_0cParser.MINUS);
		this.state = 378;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 379;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TrueInAtLeastContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_trueInAtLeast;
	return this;
}

TrueInAtLeastContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrueInAtLeastContext.prototype.constructor = TrueInAtLeastContext;

TrueInAtLeastContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TrueInAtLeastContext.prototype.EQUAL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.EQUAL);
	} else {
		return this.getToken(ASPCore2_0cParser.EQUAL, i);
	}
};


TrueInAtLeastContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

TrueInAtLeastContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

TrueInAtLeastContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


TrueInAtLeastContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TrueInAtLeastContext.prototype.classical_literal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Classical_literalContext);
	} else {
		return this.getTypedRuleContext(Classical_literalContext, i);
	}
};

TrueInAtLeastContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.DOT);
	} else {
		return this.getToken(ASPCore2_0cParser.DOT, i);
	}
};


TrueInAtLeastContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTrueInAtLeast(this);
	}
};

TrueInAtLeastContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTrueInAtLeast(this);
	}
};


ASPCore2_0cParser.TrueInAtLeastContext = TrueInAtLeastContext;

ASPCore2_0cParser.prototype.trueInAtLeast = function () {

	var localctx = new TrueInAtLeastContext(this, this._ctx, this.state);
	this.enterRule(localctx, 52, ASPCore2_0cParser.RULE_trueInAtLeast);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 381;
		this.match(ASPCore2_0cParser.T__15);
		this.state = 382;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 383;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 384;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 385;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 386;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 387;
		this.match(ASPCore2_0cParser.T__14);
		this.state = 388;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 389;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 393;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 390;
			this.classical_literal();
			this.state = 391;
			this.match(ASPCore2_0cParser.DOT);
			this.state = 395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === ASPCore2_0cParser.ID || _la === ASPCore2_0cParser.MINUS);
		this.state = 397;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 398;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TrueInAtMostContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_trueInAtMost;
	return this;
}

TrueInAtMostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrueInAtMostContext.prototype.constructor = TrueInAtMostContext;

TrueInAtMostContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TrueInAtMostContext.prototype.EQUAL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.EQUAL);
	} else {
		return this.getToken(ASPCore2_0cParser.EQUAL, i);
	}
};


TrueInAtMostContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

TrueInAtMostContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

TrueInAtMostContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


TrueInAtMostContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TrueInAtMostContext.prototype.classical_literal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Classical_literalContext);
	} else {
		return this.getTypedRuleContext(Classical_literalContext, i);
	}
};

TrueInAtMostContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.DOT);
	} else {
		return this.getToken(ASPCore2_0cParser.DOT, i);
	}
};


TrueInAtMostContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTrueInAtMost(this);
	}
};

TrueInAtMostContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTrueInAtMost(this);
	}
};


ASPCore2_0cParser.TrueInAtMostContext = TrueInAtMostContext;

ASPCore2_0cParser.prototype.trueInAtMost = function () {

	var localctx = new TrueInAtMostContext(this, this._ctx, this.state);
	this.enterRule(localctx, 54, ASPCore2_0cParser.RULE_trueInAtMost);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 400;
		this.match(ASPCore2_0cParser.T__17);
		this.state = 401;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 402;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 403;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 404;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 405;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 406;
		this.match(ASPCore2_0cParser.T__14);
		this.state = 407;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 408;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 412;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 409;
			this.classical_literal();
			this.state = 410;
			this.match(ASPCore2_0cParser.DOT);
			this.state = 414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === ASPCore2_0cParser.ID || _la === ASPCore2_0cParser.MINUS);
		this.state = 416;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 417;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TrueInExactlyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_trueInExactly;
	return this;
}

TrueInExactlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrueInExactlyContext.prototype.constructor = TrueInExactlyContext;

TrueInExactlyContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TrueInExactlyContext.prototype.EQUAL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.EQUAL);
	} else {
		return this.getToken(ASPCore2_0cParser.EQUAL, i);
	}
};


TrueInExactlyContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

TrueInExactlyContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

TrueInExactlyContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


TrueInExactlyContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TrueInExactlyContext.prototype.classical_literal = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(Classical_literalContext);
	} else {
		return this.getTypedRuleContext(Classical_literalContext, i);
	}
};

TrueInExactlyContext.prototype.DOT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.DOT);
	} else {
		return this.getToken(ASPCore2_0cParser.DOT, i);
	}
};


TrueInExactlyContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTrueInExactly(this);
	}
};

TrueInExactlyContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTrueInExactly(this);
	}
};


ASPCore2_0cParser.TrueInExactlyContext = TrueInExactlyContext;

ASPCore2_0cParser.prototype.trueInExactly = function () {

	var localctx = new TrueInExactlyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 56, ASPCore2_0cParser.RULE_trueInExactly);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 419;
		this.match(ASPCore2_0cParser.T__18);
		this.state = 420;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 421;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 422;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 423;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 424;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 425;
		this.match(ASPCore2_0cParser.T__14);
		this.state = 426;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 427;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 431;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		do {
			this.state = 428;
			this.classical_literal();
			this.state = 429;
			this.match(ASPCore2_0cParser.DOT);
			this.state = 433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		} while (_la === ASPCore2_0cParser.ID || _la === ASPCore2_0cParser.MINUS);
		this.state = 435;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 436;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintInContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintIn;
	return this;
}

ConstraintInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintInContext.prototype.constructor = ConstraintInContext;

ConstraintInContext.prototype.constraintForAll = function () {
	return this.getTypedRuleContext(ConstraintForAllContext, 0);
};

ConstraintInContext.prototype.constraintInAtLeast = function () {
	return this.getTypedRuleContext(ConstraintInAtLeastContext, 0);
};

ConstraintInContext.prototype.constraintInAtMost = function () {
	return this.getTypedRuleContext(ConstraintInAtMostContext, 0);
};

ConstraintInContext.prototype.constraintInExactly = function () {
	return this.getTypedRuleContext(ConstraintInExactlyContext, 0);
};

ConstraintInContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintIn(this);
	}
};

ConstraintInContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintIn(this);
	}
};


ASPCore2_0cParser.ConstraintInContext = ConstraintInContext;

ASPCore2_0cParser.prototype.constraintIn = function () {

	var localctx = new ConstraintInContext(this, this._ctx, this.state);
	this.enterRule(localctx, 58, ASPCore2_0cParser.RULE_constraintIn);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 442;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.T__20:
				this.state = 438;
				this.constraintForAll();
				break;
			case ASPCore2_0cParser.T__21:
				this.state = 439;
				this.constraintInAtLeast();
				break;
			case ASPCore2_0cParser.T__22:
				this.state = 440;
				this.constraintInAtMost();
				break;
			case ASPCore2_0cParser.T__23:
				this.state = 441;
				this.constraintInExactly();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintEqualContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintEqual;
	return this;
}

ConstraintEqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintEqualContext.prototype.constructor = ConstraintEqualContext;

ConstraintEqualContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

ConstraintEqualContext.prototype.SINGLE_QUOTE = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.SINGLE_QUOTE);
	} else {
		return this.getToken(ASPCore2_0cParser.SINGLE_QUOTE, i);
	}
};


ConstraintEqualContext.prototype.CONS = function () {
	return this.getToken(ASPCore2_0cParser.CONS, 0);
};

ConstraintEqualContext.prototype.DOT = function () {
	return this.getToken(ASPCore2_0cParser.DOT, 0);
};

ConstraintEqualContext.prototype.body = function () {
	return this.getTypedRuleContext(BodyContext, 0);
};

ConstraintEqualContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintEqual(this);
	}
};

ConstraintEqualContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintEqual(this);
	}
};


ASPCore2_0cParser.ConstraintEqualContext = ConstraintEqualContext;

ASPCore2_0cParser.prototype.constraintEqual = function () {

	var localctx = new ConstraintEqualContext(this, this._ctx, this.state);
	this.enterRule(localctx, 60, ASPCore2_0cParser.RULE_constraintEqual);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 444;
		this.match(ASPCore2_0cParser.T__19);
		this.state = 445;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 446;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
		this.state = 447;
		this.match(ASPCore2_0cParser.CONS);
		this.state = 449;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0) || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0)) {
			this.state = 448;
			this.body();
		}

		this.state = 451;
		this.match(ASPCore2_0cParser.DOT);
		this.state = 452;
		this.match(ASPCore2_0cParser.SINGLE_QUOTE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintForAllContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintForAll;
	return this;
}

ConstraintForAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintForAllContext.prototype.constructor = ConstraintForAllContext;

ConstraintForAllContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

ConstraintForAllContext.prototype.constraintEqual = function () {
	return this.getTypedRuleContext(ConstraintEqualContext, 0);
};

ConstraintForAllContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

ConstraintForAllContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintForAll(this);
	}
};

ConstraintForAllContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintForAll(this);
	}
};


ASPCore2_0cParser.ConstraintForAllContext = ConstraintForAllContext;

ASPCore2_0cParser.prototype.constraintForAll = function () {

	var localctx = new ConstraintForAllContext(this, this._ctx, this.state);
	this.enterRule(localctx, 62, ASPCore2_0cParser.RULE_constraintForAll);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 454;
		this.match(ASPCore2_0cParser.T__20);
		this.state = 455;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 456;
		this.constraintEqual();
		this.state = 457;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintInAtLeastContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintInAtLeast;
	return this;
}

ConstraintInAtLeastContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintInAtLeastContext.prototype.constructor = ConstraintInAtLeastContext;

ConstraintInAtLeastContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

ConstraintInAtLeastContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

ConstraintInAtLeastContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

ConstraintInAtLeastContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

ConstraintInAtLeastContext.prototype.constraintEqual = function () {
	return this.getTypedRuleContext(ConstraintEqualContext, 0);
};

ConstraintInAtLeastContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

ConstraintInAtLeastContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintInAtLeast(this);
	}
};

ConstraintInAtLeastContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintInAtLeast(this);
	}
};


ASPCore2_0cParser.ConstraintInAtLeastContext = ConstraintInAtLeastContext;

ASPCore2_0cParser.prototype.constraintInAtLeast = function () {

	var localctx = new ConstraintInAtLeastContext(this, this._ctx, this.state);
	this.enterRule(localctx, 64, ASPCore2_0cParser.RULE_constraintInAtLeast);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 459;
		this.match(ASPCore2_0cParser.T__21);
		this.state = 460;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 461;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 462;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 463;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 464;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 465;
		this.constraintEqual();
		this.state = 466;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintInAtMostContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintInAtMost;
	return this;
}

ConstraintInAtMostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintInAtMostContext.prototype.constructor = ConstraintInAtMostContext;

ConstraintInAtMostContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

ConstraintInAtMostContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

ConstraintInAtMostContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

ConstraintInAtMostContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

ConstraintInAtMostContext.prototype.constraintEqual = function () {
	return this.getTypedRuleContext(ConstraintEqualContext, 0);
};

ConstraintInAtMostContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

ConstraintInAtMostContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintInAtMost(this);
	}
};

ConstraintInAtMostContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintInAtMost(this);
	}
};


ASPCore2_0cParser.ConstraintInAtMostContext = ConstraintInAtMostContext;

ASPCore2_0cParser.prototype.constraintInAtMost = function () {

	var localctx = new ConstraintInAtMostContext(this, this._ctx, this.state);
	this.enterRule(localctx, 66, ASPCore2_0cParser.RULE_constraintInAtMost);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 468;
		this.match(ASPCore2_0cParser.T__22);
		this.state = 469;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 470;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 471;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 472;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 473;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 474;
		this.constraintEqual();
		this.state = 475;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ConstraintInExactlyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_constraintInExactly;
	return this;
}

ConstraintInExactlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintInExactlyContext.prototype.constructor = ConstraintInExactlyContext;

ConstraintInExactlyContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

ConstraintInExactlyContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

ConstraintInExactlyContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

ConstraintInExactlyContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

ConstraintInExactlyContext.prototype.constraintEqual = function () {
	return this.getTypedRuleContext(ConstraintEqualContext, 0);
};

ConstraintInExactlyContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

ConstraintInExactlyContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterConstraintInExactly(this);
	}
};

ConstraintInExactlyContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitConstraintInExactly(this);
	}
};


ASPCore2_0cParser.ConstraintInExactlyContext = ConstraintInExactlyContext;

ASPCore2_0cParser.prototype.constraintInExactly = function () {

	var localctx = new ConstraintInExactlyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 68, ASPCore2_0cParser.RULE_constraintInExactly);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 477;
		this.match(ASPCore2_0cParser.T__23);
		this.state = 478;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 479;
		this.match(ASPCore2_0cParser.T__16);
		this.state = 480;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 481;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 482;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 483;
		this.constraintEqual();
		this.state = 484;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function BestModelCostContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_bestModelCost;
	return this;
}

BestModelCostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BestModelCostContext.prototype.constructor = BestModelCostContext;

BestModelCostContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

BestModelCostContext.prototype.EQUAL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.EQUAL);
	} else {
		return this.getToken(ASPCore2_0cParser.EQUAL, i);
	}
};


BestModelCostContext.prototype.NUMBER = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(ASPCore2_0cParser.NUMBER);
	} else {
		return this.getToken(ASPCore2_0cParser.NUMBER, i);
	}
};


BestModelCostContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

BestModelCostContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

BestModelCostContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBestModelCost(this);
	}
};

BestModelCostContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBestModelCost(this);
	}
};


ASPCore2_0cParser.BestModelCostContext = BestModelCostContext;

ASPCore2_0cParser.prototype.bestModelCost = function () {

	var localctx = new BestModelCostContext(this, this._ctx, this.state);
	this.enterRule(localctx, 70, ASPCore2_0cParser.RULE_bestModelCost);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 486;
		this.match(ASPCore2_0cParser.T__24);
		this.state = 487;
		this.match(ASPCore2_0cParser.PAREN_OPEN);
		this.state = 488;
		this.match(ASPCore2_0cParser.T__25);
		this.state = 489;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 490;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 491;
		this.match(ASPCore2_0cParser.COMMA);
		this.state = 492;
		this.match(ASPCore2_0cParser.T__26);
		this.state = 493;
		this.match(ASPCore2_0cParser.EQUAL);
		this.state = 494;
		this.match(ASPCore2_0cParser.NUMBER);
		this.state = 495;
		this.match(ASPCore2_0cParser.PAREN_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function HeadContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_head;
	return this;
}

HeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeadContext.prototype.constructor = HeadContext;

HeadContext.prototype.disjunction = function () {
	return this.getTypedRuleContext(DisjunctionContext, 0);
};

HeadContext.prototype.choice = function () {
	return this.getTypedRuleContext(ChoiceContext, 0);
};

HeadContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterHead(this);
	}
};

HeadContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitHead(this);
	}
};


ASPCore2_0cParser.HeadContext = HeadContext;

ASPCore2_0cParser.prototype.head = function () {

	var localctx = new HeadContext(this, this._ctx, this.state);
	this.enterRule(localctx, 72, ASPCore2_0cParser.RULE_head);
	try {
		this.state = 499;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 497;
				this.disjunction();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 498;
				this.choice();
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function BodyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_body;
	return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.naf_literal = function () {
	return this.getTypedRuleContext(Naf_literalContext, 0);
};

BodyContext.prototype.aggregate = function () {
	return this.getTypedRuleContext(AggregateContext, 0);
};

BodyContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

BodyContext.prototype.body = function () {
	return this.getTypedRuleContext(BodyContext, 0);
};

BodyContext.prototype.NAF = function () {
	return this.getToken(ASPCore2_0cParser.NAF, 0);
};

BodyContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBody(this);
	}
};

BodyContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBody(this);
	}
};


ASPCore2_0cParser.BodyContext = BodyContext;

ASPCore2_0cParser.prototype.body = function () {

	var localctx = new BodyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 74, ASPCore2_0cParser.RULE_body);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 506;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
		switch (la_) {
			case 1:
				this.state = 501;
				this.naf_literal();
				break;

			case 2:
				this.state = 503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.NAF) {
					this.state = 502;
					this.match(ASPCore2_0cParser.NAF);
				}

				this.state = 505;
				this.aggregate();
				break;

		}
		this.state = 510;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COMMA) {
			this.state = 508;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 509;
			this.body();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function DisjunctionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_disjunction;
	return this;
}

DisjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DisjunctionContext.prototype.constructor = DisjunctionContext;

DisjunctionContext.prototype.classical_literal = function () {
	return this.getTypedRuleContext(Classical_literalContext, 0);
};

DisjunctionContext.prototype.OR = function () {
	return this.getToken(ASPCore2_0cParser.OR, 0);
};

DisjunctionContext.prototype.disjunction = function () {
	return this.getTypedRuleContext(DisjunctionContext, 0);
};

DisjunctionContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterDisjunction(this);
	}
};

DisjunctionContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitDisjunction(this);
	}
};


ASPCore2_0cParser.DisjunctionContext = DisjunctionContext;

ASPCore2_0cParser.prototype.disjunction = function () {

	var localctx = new DisjunctionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 76, ASPCore2_0cParser.RULE_disjunction);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 512;
		this.classical_literal();
		this.state = 515;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.OR) {
			this.state = 513;
			this.match(ASPCore2_0cParser.OR);
			this.state = 514;
			this.disjunction();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function ChoiceContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_choice;
	return this;
}

ChoiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceContext.prototype.constructor = ChoiceContext;

ChoiceContext.prototype.CURLY_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_OPEN, 0);
};

ChoiceContext.prototype.CURLY_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_CLOSE, 0);
};

ChoiceContext.prototype.term = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TermContext);
	} else {
		return this.getTypedRuleContext(TermContext, i);
	}
};

ChoiceContext.prototype.binop = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(BinopContext);
	} else {
		return this.getTypedRuleContext(BinopContext, i);
	}
};

ChoiceContext.prototype.choice_elements = function () {
	return this.getTypedRuleContext(Choice_elementsContext, 0);
};

ChoiceContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterChoice(this);
	}
};

ChoiceContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitChoice(this);
	}
};


ASPCore2_0cParser.ChoiceContext = ChoiceContext;

ASPCore2_0cParser.prototype.choice = function () {

	var localctx = new ChoiceContext(this, this._ctx, this.state);
	this.enterRule(localctx, 78, ASPCore2_0cParser.RULE_choice);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 520;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
			this.state = 517;
			this.term(0);
			this.state = 518;
			this.binop();
		}

		this.state = 522;
		this.match(ASPCore2_0cParser.CURLY_OPEN);
		this.state = 524;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.ID || _la === ASPCore2_0cParser.MINUS) {
			this.state = 523;
			this.choice_elements();
		}

		this.state = 526;
		this.match(ASPCore2_0cParser.CURLY_CLOSE);
		this.state = 530;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ASPCore2_0cParser.EQUAL - 56)) | (1 << (ASPCore2_0cParser.UNEQUAL - 56)) | (1 << (ASPCore2_0cParser.LESS - 56)) | (1 << (ASPCore2_0cParser.GREATER - 56)) | (1 << (ASPCore2_0cParser.LESS_OR_EQ - 56)) | (1 << (ASPCore2_0cParser.GREATER_OR_EQ - 56)))) !== 0)) {
			this.state = 527;
			this.binop();
			this.state = 528;
			this.term(0);
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Choice_elementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_choice_elements;
	return this;
}

Choice_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_elementsContext.prototype.constructor = Choice_elementsContext;

Choice_elementsContext.prototype.choice_element = function () {
	return this.getTypedRuleContext(Choice_elementContext, 0);
};

Choice_elementsContext.prototype.SEMICOLON = function () {
	return this.getToken(ASPCore2_0cParser.SEMICOLON, 0);
};

Choice_elementsContext.prototype.choice_elements = function () {
	return this.getTypedRuleContext(Choice_elementsContext, 0);
};

Choice_elementsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterChoice_elements(this);
	}
};

Choice_elementsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitChoice_elements(this);
	}
};


ASPCore2_0cParser.Choice_elementsContext = Choice_elementsContext;

ASPCore2_0cParser.prototype.choice_elements = function () {

	var localctx = new Choice_elementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 80, ASPCore2_0cParser.RULE_choice_elements);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 532;
		this.choice_element();
		this.state = 535;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.SEMICOLON) {
			this.state = 533;
			this.match(ASPCore2_0cParser.SEMICOLON);
			this.state = 534;
			this.choice_elements();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Choice_elementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_choice_element;
	return this;
}

Choice_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Choice_elementContext.prototype.constructor = Choice_elementContext;

Choice_elementContext.prototype.classical_literal = function () {
	return this.getTypedRuleContext(Classical_literalContext, 0);
};

Choice_elementContext.prototype.COLON = function () {
	return this.getToken(ASPCore2_0cParser.COLON, 0);
};

Choice_elementContext.prototype.naf_literals = function () {
	return this.getTypedRuleContext(Naf_literalsContext, 0);
};

Choice_elementContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterChoice_element(this);
	}
};

Choice_elementContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitChoice_element(this);
	}
};


ASPCore2_0cParser.Choice_elementContext = Choice_elementContext;

ASPCore2_0cParser.prototype.choice_element = function () {

	var localctx = new Choice_elementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 82, ASPCore2_0cParser.RULE_choice_element);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 537;
		this.classical_literal();
		this.state = 542;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COLON) {
			this.state = 538;
			this.match(ASPCore2_0cParser.COLON);
			this.state = 540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0)) {
				this.state = 539;
				this.naf_literals();
			}

		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function AggregateContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_aggregate;
	return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.aggregate_function = function () {
	return this.getTypedRuleContext(Aggregate_functionContext, 0);
};

AggregateContext.prototype.CURLY_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_OPEN, 0);
};

AggregateContext.prototype.CURLY_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_CLOSE, 0);
};

AggregateContext.prototype.term = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TermContext);
	} else {
		return this.getTypedRuleContext(TermContext, i);
	}
};

AggregateContext.prototype.binop = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(BinopContext);
	} else {
		return this.getTypedRuleContext(BinopContext, i);
	}
};

AggregateContext.prototype.aggregate_elements = function () {
	return this.getTypedRuleContext(Aggregate_elementsContext, 0);
};

AggregateContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAggregate(this);
	}
};


ASPCore2_0cParser.AggregateContext = AggregateContext;

ASPCore2_0cParser.prototype.aggregate = function () {

	var localctx = new AggregateContext(this, this._ctx, this.state);
	this.enterRule(localctx, 84, ASPCore2_0cParser.RULE_aggregate);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 547;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
			this.state = 544;
			this.term(0);
			this.state = 545;
			this.binop();
		}

		this.state = 549;
		this.aggregate_function();
		this.state = 550;
		this.match(ASPCore2_0cParser.CURLY_OPEN);
		this.state = 552;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.COMMA - 32)) | (1 << (ASPCore2_0cParser.COLON - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
			this.state = 551;
			this.aggregate_elements();
		}

		this.state = 554;
		this.match(ASPCore2_0cParser.CURLY_CLOSE);
		this.state = 558;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ASPCore2_0cParser.EQUAL - 56)) | (1 << (ASPCore2_0cParser.UNEQUAL - 56)) | (1 << (ASPCore2_0cParser.LESS - 56)) | (1 << (ASPCore2_0cParser.GREATER - 56)) | (1 << (ASPCore2_0cParser.LESS_OR_EQ - 56)) | (1 << (ASPCore2_0cParser.GREATER_OR_EQ - 56)))) !== 0)) {
			this.state = 555;
			this.binop();
			this.state = 556;
			this.term(0);
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Aggregate_elementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_aggregate_elements;
	return this;
}

Aggregate_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_elementsContext.prototype.constructor = Aggregate_elementsContext;

Aggregate_elementsContext.prototype.aggregate_element = function () {
	return this.getTypedRuleContext(Aggregate_elementContext, 0);
};

Aggregate_elementsContext.prototype.SEMICOLON = function () {
	return this.getToken(ASPCore2_0cParser.SEMICOLON, 0);
};

Aggregate_elementsContext.prototype.aggregate_elements = function () {
	return this.getTypedRuleContext(Aggregate_elementsContext, 0);
};

Aggregate_elementsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAggregate_elements(this);
	}
};

Aggregate_elementsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAggregate_elements(this);
	}
};


ASPCore2_0cParser.Aggregate_elementsContext = Aggregate_elementsContext;

ASPCore2_0cParser.prototype.aggregate_elements = function () {

	var localctx = new Aggregate_elementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 86, ASPCore2_0cParser.RULE_aggregate_elements);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 560;
		this.aggregate_element();
		this.state = 563;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.SEMICOLON) {
			this.state = 561;
			this.match(ASPCore2_0cParser.SEMICOLON);
			this.state = 562;
			this.aggregate_elements();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Aggregate_elementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_aggregate_element;
	return this;
}

Aggregate_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_elementContext.prototype.constructor = Aggregate_elementContext;

Aggregate_elementContext.prototype.terms = function () {
	return this.getTypedRuleContext(TermsContext, 0);
};

Aggregate_elementContext.prototype.COLON = function () {
	return this.getToken(ASPCore2_0cParser.COLON, 0);
};

Aggregate_elementContext.prototype.naf_literals = function () {
	return this.getTypedRuleContext(Naf_literalsContext, 0);
};

Aggregate_elementContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAggregate_element(this);
	}
};

Aggregate_elementContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAggregate_element(this);
	}
};


ASPCore2_0cParser.Aggregate_elementContext = Aggregate_elementContext;

ASPCore2_0cParser.prototype.aggregate_element = function () {

	var localctx = new Aggregate_elementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 88, ASPCore2_0cParser.RULE_aggregate_element);
	var _la = 0; // Token type
	try {
		this.state = 577;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.ID:
			case ASPCore2_0cParser.VARIABLE:
			case ASPCore2_0cParser.STRING:
			case ASPCore2_0cParser.NUMBER:
			case ASPCore2_0cParser.ANONYMOUS_VARIABLE:
			case ASPCore2_0cParser.COMMA:
			case ASPCore2_0cParser.MINUS:
			case ASPCore2_0cParser.PAREN_OPEN:
				this.enterOuterAlt(localctx, 1);
				this.state = 565;
				this.terms();
				this.state = 570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.COLON) {
					this.state = 566;
					this.match(ASPCore2_0cParser.COLON);
					this.state = 568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0)) {
						this.state = 567;
						this.naf_literals();
					}

				}

				break;
			case ASPCore2_0cParser.COLON:
				this.enterOuterAlt(localctx, 2);
				this.state = 572;
				this.match(ASPCore2_0cParser.COLON);
				this.state = 574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0)) {
					this.state = 573;
					this.naf_literals();
				}

				this.notifyErrorListeners("There must be at least one element to aggregate");
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Aggregate_functionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_aggregate_function;
	return this;
}

Aggregate_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_functionContext.prototype.constructor = Aggregate_functionContext;

Aggregate_functionContext.prototype.AGGREGATE_COUNT = function () {
	return this.getToken(ASPCore2_0cParser.AGGREGATE_COUNT, 0);
};

Aggregate_functionContext.prototype.AGGREGATE_MAX = function () {
	return this.getToken(ASPCore2_0cParser.AGGREGATE_MAX, 0);
};

Aggregate_functionContext.prototype.AGGREGATE_MIN = function () {
	return this.getToken(ASPCore2_0cParser.AGGREGATE_MIN, 0);
};

Aggregate_functionContext.prototype.AGGREGATE_SUM = function () {
	return this.getToken(ASPCore2_0cParser.AGGREGATE_SUM, 0);
};

Aggregate_functionContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterAggregate_function(this);
	}
};

Aggregate_functionContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitAggregate_function(this);
	}
};


ASPCore2_0cParser.Aggregate_functionContext = Aggregate_functionContext;

ASPCore2_0cParser.prototype.aggregate_function = function () {

	var localctx = new Aggregate_functionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 90, ASPCore2_0cParser.RULE_aggregate_function);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 579;
		_la = this._input.LA(1);
		if (!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (ASPCore2_0cParser.AGGREGATE_COUNT - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MAX - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_MIN - 62)) | (1 << (ASPCore2_0cParser.AGGREGATE_SUM - 62)))) !== 0))) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function OptimizeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_optimize;
	return this;
}

OptimizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptimizeContext.prototype.constructor = OptimizeContext;

OptimizeContext.prototype.optimize_function = function () {
	return this.getTypedRuleContext(Optimize_functionContext, 0);
};

OptimizeContext.prototype.CURLY_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_OPEN, 0);
};

OptimizeContext.prototype.CURLY_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.CURLY_CLOSE, 0);
};

OptimizeContext.prototype.optimize_elements = function () {
	return this.getTypedRuleContext(Optimize_elementsContext, 0);
};

OptimizeContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterOptimize(this);
	}
};

OptimizeContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitOptimize(this);
	}
};


ASPCore2_0cParser.OptimizeContext = OptimizeContext;

ASPCore2_0cParser.prototype.optimize = function () {

	var localctx = new OptimizeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 92, ASPCore2_0cParser.RULE_optimize);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 581;
		this.optimize_function();
		this.state = 582;
		this.match(ASPCore2_0cParser.CURLY_OPEN);
		this.state = 584;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
			this.state = 583;
			this.optimize_elements();
		}

		this.state = 586;
		this.match(ASPCore2_0cParser.CURLY_CLOSE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Optimize_elementsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_optimize_elements;
	return this;
}

Optimize_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optimize_elementsContext.prototype.constructor = Optimize_elementsContext;

Optimize_elementsContext.prototype.optimize_element = function () {
	return this.getTypedRuleContext(Optimize_elementContext, 0);
};

Optimize_elementsContext.prototype.SEMICOLON = function () {
	return this.getToken(ASPCore2_0cParser.SEMICOLON, 0);
};

Optimize_elementsContext.prototype.optimize_elements = function () {
	return this.getTypedRuleContext(Optimize_elementsContext, 0);
};

Optimize_elementsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterOptimize_elements(this);
	}
};

Optimize_elementsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitOptimize_elements(this);
	}
};


ASPCore2_0cParser.Optimize_elementsContext = Optimize_elementsContext;

ASPCore2_0cParser.prototype.optimize_elements = function () {

	var localctx = new Optimize_elementsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 94, ASPCore2_0cParser.RULE_optimize_elements);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 588;
		this.optimize_element();
		this.state = 591;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.SEMICOLON) {
			this.state = 589;
			this.match(ASPCore2_0cParser.SEMICOLON);
			this.state = 590;
			this.optimize_elements();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Optimize_elementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_optimize_element;
	return this;
}

Optimize_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optimize_elementContext.prototype.constructor = Optimize_elementContext;

Optimize_elementContext.prototype.weight_at_level = function () {
	return this.getTypedRuleContext(Weight_at_levelContext, 0);
};

Optimize_elementContext.prototype.COLON = function () {
	return this.getToken(ASPCore2_0cParser.COLON, 0);
};

Optimize_elementContext.prototype.naf_literals = function () {
	return this.getTypedRuleContext(Naf_literalsContext, 0);
};

Optimize_elementContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterOptimize_element(this);
	}
};

Optimize_elementContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitOptimize_element(this);
	}
};


ASPCore2_0cParser.Optimize_elementContext = Optimize_elementContext;

ASPCore2_0cParser.prototype.optimize_element = function () {

	var localctx = new Optimize_elementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 96, ASPCore2_0cParser.RULE_optimize_element);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 593;
		this.weight_at_level();
		this.state = 598;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COLON) {
			this.state = 594;
			this.match(ASPCore2_0cParser.COLON);
			this.state = 596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ASPCore2_0cParser.NAF - 29)) | (1 << (ASPCore2_0cParser.ID - 29)) | (1 << (ASPCore2_0cParser.VARIABLE - 29)) | (1 << (ASPCore2_0cParser.STRING - 29)) | (1 << (ASPCore2_0cParser.NUMBER - 29)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 29)) | (1 << (ASPCore2_0cParser.MINUS - 29)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 29)))) !== 0)) {
				this.state = 595;
				this.naf_literals();
			}

		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Optimize_functionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_optimize_function;
	return this;
}

Optimize_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optimize_functionContext.prototype.constructor = Optimize_functionContext;

Optimize_functionContext.prototype.MAXIMIZE = function () {
	return this.getToken(ASPCore2_0cParser.MAXIMIZE, 0);
};

Optimize_functionContext.prototype.MINIMIZE = function () {
	return this.getToken(ASPCore2_0cParser.MINIMIZE, 0);
};

Optimize_functionContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterOptimize_function(this);
	}
};

Optimize_functionContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitOptimize_function(this);
	}
};


ASPCore2_0cParser.Optimize_functionContext = Optimize_functionContext;

ASPCore2_0cParser.prototype.optimize_function = function () {

	var localctx = new Optimize_functionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 98, ASPCore2_0cParser.RULE_optimize_function);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 600;
		_la = this._input.LA(1);
		if (!(_la === ASPCore2_0cParser.MINIMIZE || _la === ASPCore2_0cParser.MAXIMIZE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Weight_at_levelContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_weight_at_level;
	return this;
}

Weight_at_levelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Weight_at_levelContext.prototype.constructor = Weight_at_levelContext;

Weight_at_levelContext.prototype.term = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TermContext);
	} else {
		return this.getTypedRuleContext(TermContext, i);
	}
};

Weight_at_levelContext.prototype.AT = function () {
	return this.getToken(ASPCore2_0cParser.AT, 0);
};

Weight_at_levelContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

Weight_at_levelContext.prototype.terms = function () {
	return this.getTypedRuleContext(TermsContext, 0);
};

Weight_at_levelContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterWeight_at_level(this);
	}
};

Weight_at_levelContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitWeight_at_level(this);
	}
};


ASPCore2_0cParser.Weight_at_levelContext = Weight_at_levelContext;

ASPCore2_0cParser.prototype.weight_at_level = function () {

	var localctx = new Weight_at_levelContext(this, this._ctx, this.state);
	this.enterRule(localctx, 100, ASPCore2_0cParser.RULE_weight_at_level);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 602;
		this.term(0);
		this.state = 605;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.AT) {
			this.state = 603;
			this.match(ASPCore2_0cParser.AT);
			this.state = 604;
			this.term(0);
		}

		this.state = 609;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COMMA) {
			this.state = 607;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 608;
			this.terms();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Naf_literalsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_naf_literals;
	return this;
}

Naf_literalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Naf_literalsContext.prototype.constructor = Naf_literalsContext;

Naf_literalsContext.prototype.naf_literal = function () {
	return this.getTypedRuleContext(Naf_literalContext, 0);
};

Naf_literalsContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

Naf_literalsContext.prototype.naf_literals = function () {
	return this.getTypedRuleContext(Naf_literalsContext, 0);
};

Naf_literalsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterNaf_literals(this);
	}
};

Naf_literalsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitNaf_literals(this);
	}
};


ASPCore2_0cParser.Naf_literalsContext = Naf_literalsContext;

ASPCore2_0cParser.prototype.naf_literals = function () {

	var localctx = new Naf_literalsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 102, ASPCore2_0cParser.RULE_naf_literals);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 611;
		this.naf_literal();
		this.state = 614;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.COMMA) {
			this.state = 612;
			this.match(ASPCore2_0cParser.COMMA);
			this.state = 613;
			this.naf_literals();
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Naf_literalContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_naf_literal;
	return this;
}

Naf_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Naf_literalContext.prototype.constructor = Naf_literalContext;

Naf_literalContext.prototype.classical_literal = function () {
	return this.getTypedRuleContext(Classical_literalContext, 0);
};

Naf_literalContext.prototype.NAF = function () {
	return this.getToken(ASPCore2_0cParser.NAF, 0);
};

Naf_literalContext.prototype.builtin_atom = function () {
	return this.getTypedRuleContext(Builtin_atomContext, 0);
};

Naf_literalContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterNaf_literal(this);
	}
};

Naf_literalContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitNaf_literal(this);
	}
};


ASPCore2_0cParser.Naf_literalContext = Naf_literalContext;

ASPCore2_0cParser.prototype.naf_literal = function () {

	var localctx = new Naf_literalContext(this, this._ctx, this.state);
	this.enterRule(localctx, 104, ASPCore2_0cParser.RULE_naf_literal);
	var _la = 0; // Token type
	try {
		this.state = 621;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.NAF) {
					this.state = 616;
					this.match(ASPCore2_0cParser.NAF);
				}

				this.state = 619;
				this.classical_literal();
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 620;
				this.builtin_atom();
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Classical_literalContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_classical_literal;
	return this;
}

Classical_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Classical_literalContext.prototype.constructor = Classical_literalContext;

Classical_literalContext.prototype.ID = function () {
	return this.getToken(ASPCore2_0cParser.ID, 0);
};

Classical_literalContext.prototype.MINUS = function () {
	return this.getToken(ASPCore2_0cParser.MINUS, 0);
};

Classical_literalContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

Classical_literalContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

Classical_literalContext.prototype.terms = function () {
	return this.getTypedRuleContext(TermsContext, 0);
};

Classical_literalContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterClassical_literal(this);
	}
};

Classical_literalContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitClassical_literal(this);
	}
};


ASPCore2_0cParser.Classical_literalContext = Classical_literalContext;

ASPCore2_0cParser.prototype.classical_literal = function () {

	var localctx = new Classical_literalContext(this, this._ctx, this.state);
	this.enterRule(localctx, 106, ASPCore2_0cParser.RULE_classical_literal);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 624;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.MINUS) {
			this.state = 623;
			this.match(ASPCore2_0cParser.MINUS);
		}

		this.state = 626;
		this.match(ASPCore2_0cParser.ID);
		this.state = 632;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === ASPCore2_0cParser.PAREN_OPEN) {
			this.state = 627;
			this.match(ASPCore2_0cParser.PAREN_OPEN);
			this.state = 629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.COMMA - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
				this.state = 628;
				this.terms();
			}

			this.state = 631;
			this.match(ASPCore2_0cParser.PAREN_CLOSE);
		}

	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function Builtin_atomContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_builtin_atom;
	return this;
}

Builtin_atomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Builtin_atomContext.prototype.constructor = Builtin_atomContext;

Builtin_atomContext.prototype.term = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TermContext);
	} else {
		return this.getTypedRuleContext(TermContext, i);
	}
};

Builtin_atomContext.prototype.binop = function () {
	return this.getTypedRuleContext(BinopContext, 0);
};

Builtin_atomContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBuiltin_atom(this);
	}
};

Builtin_atomContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBuiltin_atom(this);
	}
};


ASPCore2_0cParser.Builtin_atomContext = Builtin_atomContext;

ASPCore2_0cParser.prototype.builtin_atom = function () {

	var localctx = new Builtin_atomContext(this, this._ctx, this.state);
	this.enterRule(localctx, 108, ASPCore2_0cParser.RULE_builtin_atom);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 634;
		this.term(0);
		this.state = 635;
		this.binop();
		this.state = 636;
		this.term(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function BinopContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_binop;
	return this;
}

BinopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinopContext.prototype.constructor = BinopContext;

BinopContext.prototype.EQUAL = function () {
	return this.getToken(ASPCore2_0cParser.EQUAL, 0);
};

BinopContext.prototype.UNEQUAL = function () {
	return this.getToken(ASPCore2_0cParser.UNEQUAL, 0);
};

BinopContext.prototype.LESS = function () {
	return this.getToken(ASPCore2_0cParser.LESS, 0);
};

BinopContext.prototype.GREATER = function () {
	return this.getToken(ASPCore2_0cParser.GREATER, 0);
};

BinopContext.prototype.LESS_OR_EQ = function () {
	return this.getToken(ASPCore2_0cParser.LESS_OR_EQ, 0);
};

BinopContext.prototype.GREATER_OR_EQ = function () {
	return this.getToken(ASPCore2_0cParser.GREATER_OR_EQ, 0);
};

BinopContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterBinop(this);
	}
};

BinopContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitBinop(this);
	}
};


ASPCore2_0cParser.BinopContext = BinopContext;

ASPCore2_0cParser.prototype.binop = function () {

	var localctx = new BinopContext(this, this._ctx, this.state);
	this.enterRule(localctx, 110, ASPCore2_0cParser.RULE_binop);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 638;
		_la = this._input.LA(1);
		if (!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ASPCore2_0cParser.EQUAL - 56)) | (1 << (ASPCore2_0cParser.UNEQUAL - 56)) | (1 << (ASPCore2_0cParser.LESS - 56)) | (1 << (ASPCore2_0cParser.GREATER - 56)) | (1 << (ASPCore2_0cParser.LESS_OR_EQ - 56)) | (1 << (ASPCore2_0cParser.GREATER_OR_EQ - 56)))) !== 0))) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TermsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_terms;
	return this;
}

TermsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermsContext.prototype.constructor = TermsContext;

TermsContext.prototype.term = function () {
	return this.getTypedRuleContext(TermContext, 0);
};

TermsContext.prototype.COMMA = function () {
	return this.getToken(ASPCore2_0cParser.COMMA, 0);
};

TermsContext.prototype.terms = function () {
	return this.getTypedRuleContext(TermsContext, 0);
};

TermsContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTerms(this);
	}
};

TermsContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTerms(this);
	}
};


ASPCore2_0cParser.TermsContext = TermsContext;

ASPCore2_0cParser.prototype.terms = function () {

	var localctx = new TermsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 112, ASPCore2_0cParser.RULE_terms);
	var _la = 0; // Token type
	try {
		this.state = 653;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 640;
				this.term(0);
				this.state = 643;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === ASPCore2_0cParser.COMMA) {
					this.state = 641;
					this.match(ASPCore2_0cParser.COMMA);
					this.state = 642;
					this.terms();
				}

				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 645;
				this.term(0);
				this.state = 646;
				this.match(ASPCore2_0cParser.COMMA);
				this.notifyErrorListeners("Missing term in list of terms");
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 649;
				this.match(ASPCore2_0cParser.COMMA);
				this.state = 650;
				this.term(0);
				this.notifyErrorListeners("Missing term in list of terms");
				break;

		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


function TermContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_term;
	return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.ID = function () {
	return this.getToken(ASPCore2_0cParser.ID, 0);
};

TermContext.prototype.PAREN_OPEN = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_OPEN, 0);
};

TermContext.prototype.PAREN_CLOSE = function () {
	return this.getToken(ASPCore2_0cParser.PAREN_CLOSE, 0);
};

TermContext.prototype.terms = function () {
	return this.getTypedRuleContext(TermsContext, 0);
};

TermContext.prototype.NUMBER = function () {
	return this.getToken(ASPCore2_0cParser.NUMBER, 0);
};

TermContext.prototype.STRING = function () {
	return this.getToken(ASPCore2_0cParser.STRING, 0);
};

TermContext.prototype.VARIABLE = function () {
	return this.getToken(ASPCore2_0cParser.VARIABLE, 0);
};

TermContext.prototype.ANONYMOUS_VARIABLE = function () {
	return this.getToken(ASPCore2_0cParser.ANONYMOUS_VARIABLE, 0);
};

TermContext.prototype.term = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(TermContext);
	} else {
		return this.getTypedRuleContext(TermContext, i);
	}
};

TermContext.prototype.MINUS = function () {
	return this.getToken(ASPCore2_0cParser.MINUS, 0);
};

TermContext.prototype.arithop = function () {
	return this.getTypedRuleContext(ArithopContext, 0);
};

TermContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitTerm(this);
	}
};


ASPCore2_0cParser.prototype.term = function (_p) {
	if (_p === undefined) {
		_p = 0;
	}
	var _parentctx = this._ctx;
	var _parentState = this.state;
	var localctx = new TermContext(this, this._ctx, _parentState);
	var _prevctx = localctx;
	var _startState = 114;
	this.enterRecursionRule(localctx, 114, ASPCore2_0cParser.RULE_term, _p);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 674;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case ASPCore2_0cParser.ID:
				this.state = 656;
				this.match(ASPCore2_0cParser.ID);
				this.state = 662;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
				if (la_ === 1) {
					this.state = 657;
					this.match(ASPCore2_0cParser.PAREN_OPEN);
					this.state = 659;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ASPCore2_0cParser.ID - 32)) | (1 << (ASPCore2_0cParser.VARIABLE - 32)) | (1 << (ASPCore2_0cParser.STRING - 32)) | (1 << (ASPCore2_0cParser.NUMBER - 32)) | (1 << (ASPCore2_0cParser.ANONYMOUS_VARIABLE - 32)) | (1 << (ASPCore2_0cParser.COMMA - 32)) | (1 << (ASPCore2_0cParser.MINUS - 32)) | (1 << (ASPCore2_0cParser.PAREN_OPEN - 32)))) !== 0)) {
						this.state = 658;
						this.terms();
					}

					this.state = 661;
					this.match(ASPCore2_0cParser.PAREN_CLOSE);

				}
				break;
			case ASPCore2_0cParser.NUMBER:
				this.state = 664;
				this.match(ASPCore2_0cParser.NUMBER);
				break;
			case ASPCore2_0cParser.STRING:
				this.state = 665;
				this.match(ASPCore2_0cParser.STRING);
				break;
			case ASPCore2_0cParser.VARIABLE:
				this.state = 666;
				this.match(ASPCore2_0cParser.VARIABLE);
				break;
			case ASPCore2_0cParser.ANONYMOUS_VARIABLE:
				this.state = 667;
				this.match(ASPCore2_0cParser.ANONYMOUS_VARIABLE);
				break;
			case ASPCore2_0cParser.PAREN_OPEN:
				this.state = 668;
				this.match(ASPCore2_0cParser.PAREN_OPEN);
				this.state = 669;
				this.term(0);
				this.state = 670;
				this.match(ASPCore2_0cParser.PAREN_CLOSE);
				break;
			case ASPCore2_0cParser.MINUS:
				this.state = 672;
				this.match(ASPCore2_0cParser.MINUS);
				this.state = 673;
				this.term(2);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this._ctx.stop = this._input.LT(-1);
		this.state = 682;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 72, this._ctx)
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				if (this._parseListeners !== null) {
					this.triggerExitRuleEvent();
				}
				_prevctx = localctx;
				localctx = new TermContext(this, _parentctx, _parentState);
				this.pushNewRecursionContext(localctx, _startState, ASPCore2_0cParser.RULE_term);
				this.state = 676;
				if (!(this.precpred(this._ctx, 1))) {
					throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
				}
				this.state = 677;
				this.arithop();
				this.state = 678;
				this.term(2);
			}
			this.state = 684;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 72, this._ctx);
		}

	} catch (error) {
		if (error instanceof antlr4.error.RecognitionException) {
			localctx.exception = error;
			this._errHandler.reportError(this, error);
			this._errHandler.recover(this, error);
		} else {
			throw error;
		}
	} finally {
		this.unrollRecursionContexts(_parentctx)
	}
	return localctx;
};


function ArithopContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = ASPCore2_0cParser.RULE_arithop;
	return this;
}

ArithopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArithopContext.prototype.constructor = ArithopContext;

ArithopContext.prototype.PLUS = function () {
	return this.getToken(ASPCore2_0cParser.PLUS, 0);
};

ArithopContext.prototype.MINUS = function () {
	return this.getToken(ASPCore2_0cParser.MINUS, 0);
};

ArithopContext.prototype.TIMES = function () {
	return this.getToken(ASPCore2_0cParser.TIMES, 0);
};

ArithopContext.prototype.DIV = function () {
	return this.getToken(ASPCore2_0cParser.DIV, 0);
};

ArithopContext.prototype.enterRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.enterArithop(this);
	}
};

ArithopContext.prototype.exitRule = function (listener) {
	if (listener instanceof ASPCore2_0cListener) {
		listener.exitArithop(this);
	}
};


ASPCore2_0cParser.ArithopContext = ArithopContext;

ASPCore2_0cParser.prototype.arithop = function () {

	var localctx = new ArithopContext(this, this._ctx, this.state);
	this.enterRule(localctx, 116, ASPCore2_0cParser.RULE_arithop);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 685;
		_la = this._input.LA(1);
		if (!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (ASPCore2_0cParser.PLUS - 45)) | (1 << (ASPCore2_0cParser.MINUS - 45)) | (1 << (ASPCore2_0cParser.TIMES - 45)) | (1 << (ASPCore2_0cParser.DIV - 45)))) !== 0))) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};


ASPCore2_0cParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 57:
			return this.term_sempred(localctx, predIndex);
		default:
			throw "No predicate with index:" + ruleIndex;
	}
};

ASPCore2_0cParser.prototype.term_sempred = function (localctx, predIndex) {
	switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ASPCore2_0cParser = ASPCore2_0cParser;
